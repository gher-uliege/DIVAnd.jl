var documenterSearchIndex = {"docs":
[{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"DIVAnd","category":"page"},{"location":"#DIVAnd.jl-documentation","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"","category":"section"},{"location":"#API-reference","page":"DIVAnd.jl documentation","title":"API reference","text":"","category":"section"},{"location":"#DIVAnd.diva3d","page":"DIVAnd.jl documentation","title":"DIVAnd.diva3d","text":"dbinfo = diva3d(xi,x,value,len,epsilon2,filename,varname)\n\nCreate a 3D analysis (or a series of 3D analysis) with DIVAnd using the observations value (vector) at the locations x (tuple of vectors) onto the regular grid defined by the vectors xi using the scaled observational error variance epsilon2 and the correlation length len. The result will be saved in the netCDF file filename under the variable varname.\n\nInputs\n\nxi: tuple with n elements. Every element represents a coordinate of the final grid on which the observations are interpolated\nx: tuple with n elements. Every element represents a coordinate of the observations\nvalue: value of the observations\nlen: tuple with n elements. Every element represents the correlation length.  If fitcorrlen is false (default), the correlation length should be expressed in meters.  If fitcorrlen is true, then len can be the empty tuple () or a tuple containing  3 arrays of normalized (or relative) correlation lengths which will be multiplied by the  horizontal and vertical correlation lengths. In the case where fitcorrlen is true  and len is provided, the elements of the tuple len are adimensional and mostly of the  order of 1. Where the elements of len are less than 1, the correlation length (obtained via  fitting, DIVAnd.fithorzlen and DIVAnd.fitvertlen) is effectively decreased and where it is larger  than 1 it is increased. This is useful for example to decrease the correlation length locally  near steep topography. It is advised to check the range of the scaled correlation length which  is printed on the screen while running DIVAnd. The fitted values are also returned in the structure dbinfo.  The correlation length fitting can produce irrealistic results for inhomogenous data coverage.\nepsilon2: error variance of the observations (normalized by the error variance of the background field).\n\nepsilon2 can be a scalar (all observations have the same error variance and their errors are decorrelated), a vector (all observations can have a different error variance and their errors are decorrelated) or a matrix (all observations can have a different error variance and their errors can be correlated). If epsilon2 is a scalar, it is thus the inverse of the signal-to-noise ratio.\n\nfilename: the output netCDF filename.\nvarname: the name of the variable (used in the netCDF file).\n\nOptional input arguments:\n\nbathname: path to the netCDF bathymetry (default ../../DIVAnd-example-data/Global/Bathymetry/gebco_30sec_16.nc relative to this source file)\nbathisglobal: true (default) is the bathymetry is a global data set\nplotres: call-back routine for plotting ((timeindex,sel,fit,erri) -> nothing)\ntimeorigin: time origin (default DateTime(1900,1,1,0,0,0))\nmoddim: modulo for cyclic dimension (vector with n elements).    Zero is used for non-cyclic dimensions. Halo points should    not be included for cyclic dimensions. For example if the first dimension    is cyclic, then the grid point corresponding to mask[1,j] should be    between mask[end,1] (left neighbor) and mask[2,j] (right neighbor). The default is [0,0,0],\nzlevel: :surface (default) for surface analysis and :floor for analysis from the bottom floor.\nncvarattrib: dictionary of netCDF variable attributes.\nncglobalattrib: dictionary of netCDF global attributes.\ntransform: Anamorphosis transformation function (default: Anam.notransform()).\nfitcorrlen: true if the correlation length is determined from the observation (default false).    Note that the parameter len is interpreted differently when fitcorrlen is set to true.\nfithorzcorrlen: true if the horizontal correlation length is determined from the observation (default: the value of fitcorrlen)    Note that the parameter len is interpreted differently when fithorzcorrlen is set to true.\nfitvertcorrlen: true if the vertical correlation length is determined from the observation (default: the value of fitcorrlen)    Note that the parameter len is interpreted differently when fitvertcorrlen is set to true.\nfithorz_param: dictionary with additional optional parameters for fithorzlen, for example: Dict(:smoothz => 200., :searchz => 50.).\nfitvert_param: dictionary with additional optional parameters for fitvertlen.\ndistfun: function to compute the distance (default (xi,xj) -> DIVAnd.distance(xi[2],xi[1],xj[2],xj[1])).\nmask: if different from nothing, then this mask overrides land-sea mask based on the bathymetry\n\n(default nothing).\n\nbackground: if different from nothing, then this parameter allows one\n\nto load the background from a call-back function (default nothing). The call-back functions has the parameters (x,n,trans_value,trans) where x represent the position of the observations, n the time index, trans_value, the observations (possibly transformed) and trans the transformation function. The output of this function is the gridded background field and the observations minus the background field. See also DIVAnd.backgroundfile.\n\nbackground_epsilon2_factor: multiplication for epsilon2 when computing a  vertical profile as a background estimate (default: computed internally based on the amount of data). This parameter is not used  when the parameter background or background_lenz is provided.\nbackground_lenz: vertical correlation for background computation (default 20 m). This parameter is not used  when the parameter background is provided.\nbackground_len: deprecated option replaced by background_lenz.\nfilterbackground: number of iterations to filter the background profile (default 0, no filtering)\nmemtofit: keyword controlling how to cut the domain depending on the memory   remaining available for inversion. It is not the total memory (default 3). Use a large value (e.g. 100) to force the   usage for the more efficient direct solver if you are not limited by the amount of RAM memory.\nminfield: if the analysed field is below minfield, its value is replace by minfield (default -Inf, i.e. no substitution is done).\nmaxfield: if the analysed field is above maxfield, its value is replace by maxfield (default +Inf, i.e. no substitution is done).\nsaveindex: controls if just a subset of the analysis should be saved to   the netCDF file. Per default, saveindex is (:,:,:) (corresponding to   longitude, latitude and depth indices) meaning that everything is saved.   If however, for example the first layer should not be saved then saveindex   should be (:,:,2:length(depthr)) where depthr is the 3rd element of xi.\nniter_e: Number of iterations to estimate the optimal scale factor of  epsilon2 using Desroziers et al. 2005 (doi: 10.1256/qj.05.108). The default   is 1 (i.e. no optimization is done).\ncoeff_derivative2 (vector of 3 floats): for every dimension where this value is non-zero, an additional term is added to the cost function penalizing the second derivative. A typical value of this parameter is [0.,0.,1e-8].\nsurfextend: create an additional layer on top of the surface layer so that the effective background error variance is more similar to the deep ocean.  false is the default value.\nstat_per_timeslice (default false): if true, then the residual values (and possibly qcvalues) are also returned by time slices which is useful if the time slices overlap (see example below).\nerror_thresholds (default [(\"L1\", 0.3), (\"L2\", 0.5)]). This is a list of tuples with the applied error thresholds and the variable names suffixes. If the variable is named e. g. \"Salinity\", then the variables \"Salinity_L1\" (resp.  \"Salinity_L2\") will be created where the analysis is masked if the relative error exceeds 0.3 (resp. 0.5).\ndivamethod: DIVAndgo (default) or DIVAndrun\n\nAny additional keywoard arguments understood by DIVAndgo/DIVAndrun can also be used here (e.g. velocity constrain)\n\nThe output is a dictionary with the followings keys:\n\n:residuals: the difference between the observations and the analysis (interpolated linearly to the\n\nlocation of the observations). The residual is NaN if the observations are not within the domain as defined by the mask and the coordinates of the observations x.\n\n:qcvalues: quality control scores (if activated)\n\nExample\n\nExample on how to aggredate the residuals per time slice and to retain the maximum residual:\n\nselection_per_timeslice = dbinfo[:selection_per_timeslice]\nresiduals_per_timeslice = dbinfo[:residuals_per_timeslice]\nselection_per_timeslice = dbinfo[:selection_per_timeslice]\n\nmax_residuals = fill(-Inf,length(value))\nfor n = 1:length(selection_per_timeslice)\n   sel = selection_per_timeslice[n]\n   max_residuals[sel] = max.(max_residuals[sel],residuals_per_timeslice[n])\nend\n\nnote: Note\nAt all vertical levels, there should at least one sea point. The function assumes a spherical Earth with a radius equal to the mean Earth radius.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAndrun","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAndrun","text":"DIVAndrun(mask,pmn,xi,x,f,len,epsilon2; <keyword arguments>)\n\nPerform an n-dimensional variational analysis of the observations f located at the coordinates x. The array fi represent the interpolated field at the grid defined by the coordinates xi and the scales factors pmn.\n\nInput:\n\nmask: binary mask delimiting the domain. true is inside and false outside.\n\nFor oceanographic application, this is the land-sea mask where sea is true and land is false.\n\npmn: scale factor of the grid. pmn is a tuple with n elements. Every  element represents the scale factor of the corresponding dimension. Its  inverse is the local resolution of the grid in a particular dimension.  For example, in two dimensions, pmn is a tuple (pm,pn) where pm is  the inverse of the local resolution in first dimension and pn is the the inverse  of the local resolution in second dimension.\nxi: tuple with n elements. Every element represents a coordinate of the final grid on which the observations are interpolated.\nx: tuple with n elements. Every element represents a coordinate of the observations.\nf: value of the observations minus the background estimate (vector of m elements where m is the number of observations). See also note.\nlen: tuple with n elements. Every element represents the correlation length for a given dimension.\nepsilon2: error variance of the observations (normalized by the error variance of the background field). epsilon2 can be a scalar (all observations have the same error variance and their errors are decorrelated), a vector (all observations can have a different error variance and their errors are decorrelated) or a matrix (all observations can have a different error variance and their errors can be correlated). If epsilon2 is a scalar, it is thus the inverse of the signal-to-noise ratio.\n\nOptional input arguments specified as keyword arguments\n\nvelocity: velocity of the advection constraint. It is a tuple of n arrays and each array represents a single velocity component. The individual array should have the same size as the final grid. The first (second,..) element of the velocity is the velocity compomenent along the first (second,...) dimension. The velocity has the units of a length-scale. If this parameter is derived from ocean currents, then the later must be multiplied by a factor (to be determined for example by cross-validation) and this factor has the units of a time-scale. The default is no-advection constraint.\nalpha: alpha is vector of coefficients multiplying various terms in the      cost function. The first element multiplies the norm.      The other i-th element of alpha multiplies the (i+1)-th derivative.      Per default, the highest derivative is m = ceil(1+neff/2) where neff is the      effective dimension of the problem (the number of dimensions with a nonzero      correlation length) and ceil is the ceiling function (rounding up).\n\n   The values of alpha is the (m+1)th row of the Pascal triangle:\n      m=0         1\n      m=1       1   1\n      m=1     1   2   1     (n=1,2)\n      m=2   1   3   3   1   (n=3,4)\n      ...\n\nconstraints: a structure with user specified quandratic constraints (see DIVAnd_addc).\nineqconstraints: a structure with user specified inequality constraints such that the analysis x satisfiesHx >= y0. There is no check if the inequality constraints make sense are compatible with each other or with the data. Inequalities will not be satisfied exactly everywhere unless they are already satisfied with a normal analysis. You can increase the number of iterations by increasing ntriesmax.\nmoddim: modulo for cyclic dimension (vector with n elements).    Zero is used for non-cyclic dimensions. One should not include a boundary    zone (sometimes called a ghost zone or halo) for cyclic dimensions.    For example if the first dimension    is cyclic, then the grid point corresponding to mask[1,j] should be    between mask[end,j] (left neighbor) and mask[2,j] (right neighbor).\nfracindex: fractional indices (n-by-m array). If this array is specified,    then x and xi are not used.\ninversion: direct solver (:chol for Cholesky factorization), an    interative solver (:pcg for preconditioned conjugate gradient [1]) can be    used or :cg_amg_sa for a multigrid method with preconditioned conjugate    gradient. The two last methods are iterative methods who a controlled by    the number of iterations maxit and the tolerance tol.\ncompPC: function that returns a preconditioner for the primal formulation    if inversion is set to :pcg. The function has the following arguments:\n     fun = compPC(iB,H,R)\nwhere iB is the inverse background error covariance, H the observation   operator and R the error covariance of the observation. The function compPC returns the   preconditioner fun(x,fx) computing fx = M \\ x (the inverse of M times x)   where M is a positive defined symmetric matrix [1].   Effectively, the system E⁻¹ A (E⁻¹)ᵀ (E x) = E⁻¹ b is solved for (E x) where E Eᵀ = M.   Ideally, M should this be similar to A, so that E⁻¹ A (E⁻¹)ᵀ is close to the identity matrix.\nfi0: starting field for iterative primal algorithm (same size as mask).\nf0: starting field for iterative dual algorithm (same size as the observations f).\noperatortype: Val{:sparse} for using sparse matrices (default) or Val{:MatFun} or using functions   to define the constrains.\nscale_len: true (default) if the correlation length-scale should be scaled   such that the analytical   kernel reaches 0.6019072301972346 (besselk(1.,1.)) at the same distance   than in 2D. The kernel behaves thus similar to   the default kernel in two dimensions (alpha = [1,2,1]).\nalphabc: numerical value defining how the last grid points are stretched outward.  If alphabc is 1, the default value mimics an infinite domain.  To have previous behaviour of finite domain use alphabc equal to 0.\nbtrunc: if provided defines where to truncate the calculation of the   covariance matrix B. Only values up and including alpha[btrunc] will be   calculated. If the iterative solution is calculated, the missing terms will   be calculated on the fly during the conjugate gradient calculations.    Default value is none and full covariance calculation.\n\nOutput:\n\nfi: the analysed field\ns: a structure with an array s.P representing the analysed error covariance\n\nNote:\n\nIf zero is not a valid first guess for your variable (as it is the case for   e.g. ocean temperature), you have to subtract the first guess from the   observations before calling DIVAnd and then add the first guess back in.\n\nExample:\n\nsee DIVAnd_simple_example.jl\n\nReferences\n\n[1]  The preconditioned conjugate gradient method\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAndgo","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAndgo","text":"fi, erri, residuals, qcvalues, scalefactore = DIVAndgo(mask,pmn,xi,x,f,len,epsilon2,errormethod; ...);\n\nInput:\n\nSame arguments as DIVAndrun with in addition\nerrormethod :   you have the choice between :cpme (clever poorman's method, default method if parameter not provided), :none or :exact (only available if windowed analysis are done with DIVAndrun)\nMEMTOFIT=: keyword controlling how to cut the domain depending on the memory remaining available for inversion (not total memory)\nRTIMESONESCALES= : if you provide a tuple of length scales, data are weighted differently depending on the numbers of neighbours they have. See weight_RtimesOne for details\nQCMETHOD= : if you provide a qc method parameter, quality flags are calculated. See DIVAnd_cv for details\nsolver (default :auto:). :direct for the direct solver or :auto for automatic choice between the direct solver or the iterative solver.\noverlapfactor : describes how many times the length scale is used for the overlapping. default is 3.3. use lower values ONLY for very good data coverage.\n\nOutput:\n\nfi: the analysed field\nerri: relative error field on the same grid as fi. () if errormethod is fixed to :none\nresiduals: array of residuals at data points. For points not on the grid or on land: NaN\nqcvalues: if QCMETHOD= is provided, the output array contains the quality flags otherwise qcvalues is (). For points on land or not on the grid: 0\nscalefactore: Desroziers et al. 2005 (doi: 10.1256/qj.05.108) scale factor for epsilon2\n\nPerform an n-dimensional variational analysis of the observations f located at the coordinates x. The array fi represent the interpolated field at the grid defined by the coordinates xi and the scales factors pmn.\n\nIMPORTANT: DIVAndgo is very similar to DIVAndrun and is only interesting to use if DIVAndrun cannot fit into memory or if you want to parallelize. (In the latter case do not forget to define the number of workers; see addprocs for example)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_averaged_bg","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_averaged_bg","text":"fma,faanom = DIVAnd_averaged_bg(mask,pmn,xi,x,f,len,epsilon2,toaverage;moddim=[])\n\nInput:\n\nAs for DIVAndrun, including all dimensions before averaging\n\nadditional argument:\n\ntoaverage: Array of ndims of boolean telling if in the corresponding direction averaging must be done\n\nPresently NO optional arguments from DIVAndrun supported except moddim\n\nOutput:\n\nfma: Analysis where in the directions where toaverage is true, the same value is found\nfaanom: Data anomalies when the analysis is subtracted from the input field.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.SDNMetadata","page":"DIVAnd.jl documentation","title":"DIVAnd.SDNMetadata","text":"ncglobalattrib,ncvarattrib = SDNMetadata(metadata,fi)\n\nBased on the information in the dictionary metadata and the analysed 4D field fi produce a list of NetCDF global and variable attributes for DIVAnd_save2. To list all registered projects call keys(DIVAnd.PROJECTS). For example:\n\njulia> using DIVAnd\njulia> keys(DIVAnd.PROJECTS)\nBase.KeySet for a Dict{String,Dict{String,String}} with 3 entries. Keys:\n  \"EMODNET-chemistry\"\n  \"SeaDataNet\"\n  \"SeaDataCloud\"\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.save","page":"DIVAnd.jl documentation","title":"DIVAnd.save","text":"save(filename,xyi,fi,varname;\n                      ncvarattrib = Dict(), ncglobalattrib = Dict(), ...)\n\nSave the result of the analysis in a netCDF file.\n\nInput arguments\n\nfilename: the name of the NetCDF file\nxyi: tuple with n vectors. Every element in this tuple represents a coordinate of the final grid on which the observations are interpolated\nfi: the analysed field\nvarname: the name of the NetCDF variable\n\nOptional arguments:\n\nncglobalattrib: a dictionary with the global attributes\nncvarattrib: a dictionary with the variable attributes\nrelerr: relative error\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.loadbigfile","page":"DIVAnd.jl documentation","title":"DIVAnd.loadbigfile","text":"value,lon,lat,depth,time,obsid = loadbigfile(filename)\n\nLoad data from the text file filename and returns vectors with the value, longitude, latitude, depth and time (as DateTime). A list string identifiers is also returned.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.checkobs","page":"DIVAnd.jl documentation","title":"DIVAnd.checkobs","text":"checkobs(x,v,ids)\ncheckobs(io::IO,x,v,ids)\n\nPrint some basic information about the coordinates x (tuple of vector) and values v (vector) having the identifier ids (vector of strings) to check erroneous data. It prints wheter NaNs or Infs are found and the minimum and maximum value.\n\nIf the argument io is provided, the information is input/output stream io.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.smoothfilter","page":"DIVAnd.jl documentation","title":"DIVAnd.smoothfilter","text":"ff = smoothfilter(x,f,scale)\n\nSmooth the function f defined on x by solving the diffusion equation\n\n∂ₜ ϕ = ν ∂²ₓ ϕ\n\nscale is the spatial scales of the removed length-scales. It is defined as 2Tν  where T is the integration time.\n\nIt uses the Greens functions for 1D diffusion: 1/sqrt(4 π ν t) * exp(-x^2 / (4νt))\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Anam.loglin","page":"DIVAnd.jl documentation","title":"DIVAnd.Anam.loglin","text":"trans,invtrans = loglin(t; epsilon = 0.)\n\nProvide the following transform log(x + epsilon) (for x < t) and its inverse. Beyond the threshold t (x ≥ t), the function is extended linearly in a continous way.\n\ntrans,invtrans are scalar functions such that for any x (x > epsilon), x == invtrans(trans(x)).\n\nFor any array X, we have: X == invtrans.(trans.(X)).\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Anam.logit","page":"DIVAnd.jl documentation","title":"DIVAnd.Anam.logit","text":"trans,invtrans = logit(; min = 0., max = 1.)\n\nProvide the logit transform and its inverse. Per default the logit transform maps values within the interval from 0 and 1. This can be changed with the min and max parameters. Note that trans(min) = -∞ and trans(max) = +∞. The use safety-margin might be necessary.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.divadoxml","page":"DIVAnd.jl documentation","title":"DIVAnd.divadoxml","text":"DIVAnd.divadoxml(filepath,varname,project,cdilist,xmlfilename;\n                 ignore_errors = false,\n                 WMSlayername = [],\n                 previewindex = 1,\n                 additionalcontacts = [],\n                 additionalvars = Dict{String,Any}(),\n                 default_error_level = \"L2\",\n\n)\n\nGenerate the XML metadata file xmlfilename from the NetCDF file filepath (or list of files) with the  NetCDF variable varname. Project is either \"SeaDataNet\", \"EMODNET-chemistry\" or \"SeaDataCloud\". cdilist is the file from https://emodnet-chemistry.maris.nl/download/export.zip.\n\nThe XML file contains a list of the data the originators. divadoxml will abort with an error if some combinations of EDMO code, local CDI ID are not present in the cdilist. Such errors can be ignored if ignore_errors is set to true. To understand why some EDMO code/local CDI ID could not be found, one can the decompress file from https://emodnet-chemistry.maris.nl/download/export.zip which contains a file called export.csv. This file has the columns author_edmo and cdi_identifier which this function uses to find the data originators (column originator_edmo).\n\nInformation can be overridden with the dictionary additionalvars. The keys should corresponds to the template tags found the in template directory. Template tags are the strings inside {{ and }}.\n\nNetCDF_URL should be suppplied since it's a URL of a ZIP file which is usually not from OceanBrowser.\n\nIf filepath is a vector of file names, the argument WMSlayername can be provided to give additional information to distinguish between the NetCDF files. The elements of the vector of string will be appended to the description of the WMS layer.\n\nThe resulting XML file includes the file names (provided by filepath). Do not change the file names after running this function, otherwise the XML will still contain a reference to the old file names. If you must change the file names please do so before running this script.\n\nIf the data is present in a subfolder (e.g. \"Winter\") later on the OceanBrowser webserver, the filepath should also contain this subfolder (e.g. \"Winter/somefile.nc\"). The local directories should mirror the directory structure on OceanBrowser. Relative paths should be used, and if the Julia code isn't right above the NetCDF files, use cd(\"<path>\") before each setting the files parameter which use paths relative to this path.\n\nIf the products will go into a sub-directory (which is different from the domain name), the part of the path should with provided with the parameter url_path.\n\nThe link for the NetCDF download for EMODNET-chemistry for example is the following:\n\nPROJECTS[\"EMODNET-chemistry\"][\"baseurl_http\"] *  \"/\" * url_path * \"/\" * filepath\n\nwhere url_path defaults to the the domain name (from the C19 vocabulary) if it is not provided. The script will print the URLs for verification.\n\nadditionalcontacts is a list of dictionaries with additional condact information to be added in the XML file. Elements are typically create by the function DIVAnd.getedmoinfo.\n\nWMSexclude is a list of string with NetCDF variables not be included the XML under the WMS layer section.\n\ndefault_error_level is either L1 or L2 corresponding to the masked variables using relative error threshold 0.3 or 0.5. The default is L2.\n\nExample\n\ndownload(\"https://emodnet-chemistry.maris.nl/download/export.zip\",\"export.zip\")\nfiles = [\n         \"Winter (January-March) - 6-year running averages/Water_body_chlorophyll-a.4Danl.nc\",\n         \"Spring (April-June) - 6-year running averages/Water_body_chlorophyll-a.4Danl.nc\",\n         \"Summer (July-September) - 6-year running averages/Water_body_chlorophyll-a.4Danl.nc\",\n         \"Autumn (October-December) - 6-year running averages/Water_body_chlorophyll-a.4Danl.nc\"\n         ];\n\nadditionalcontacts = [\n    DIVAnd.getedmoinfo(1977,\"originator\"), # US NODC for World Ocean Database\n    DIVAnd.getedmoinfo(4630,\"originator\"), # CORIOLIS for CORA\n]\n\nDIVAnd.divadoxml(files,\"Water_body_chlorophyll-a\",\"EMODNET-chemistry\",\"export.zip\",\"test.xml\";\n    ignore_errors = true,\n    additionalvars = Dict(\"abstract\" => \"Here goes the abstract\"),\n    additionalcontacts = additionalcontacts,\n    WMSlayername = [\"winter\",\"spring\",\"summer\",\"autumn\"]\n)\n\nFor this function the following global NetCDF attributes are mandatory:\n\nproduct_id: UUID identifier\nparameter_keyword_urn or parameter_keyword (or parameter_keywords): P35 code (e.g. \"SDN:P35::EPC00007\") or preferred label (e.g. \"Water body phosphate\") respectively. Note the singular form (parameter_keyword) is preferred because there should be only a single P35 parameter per NetCDF file, but singular and plural forms are valid.\nsearch_keywords_urn or search_keywords: P02 code or preferred label\narea_keywords_urn or area_keywords: C19 code or preferred label\ninstitution_edmo_code: EDMO code number\nproduct_version: version of the product\n\nAdding a global attribute, can be done using the following:\n\nds = NCDatafile(\"DIVA_file.nc\",\"a\")\nds.attrib[\"attribute_name\"] = \"attribute value\"\nclose(ds)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.getedmoinfo","page":"DIVAnd.jl documentation","title":"DIVAnd.getedmoinfo","text":"contact = DIVAnd.getedmoinfo(edmo_code,role)\n\nReturns a dictionary with the contact information from the EDMO registry based on the prodivided emdo_code. role is the Sextant contact information role, i.e. either \"originator\" or \"author\".\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.random","page":"DIVAnd.jl documentation","title":"DIVAnd.random","text":"field = DIVAnd.random(mask,pmn,len,Nens)\n\nCreate Nens random fields with the correlation length len in a domain with the mask mask and the metric pmn.\n\nSee DIVAnd.DIVAndrun for more information about these parameters.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.distance","page":"DIVAnd.jl documentation","title":"DIVAnd.distance","text":"d = distance(lat1,lon1,lat2,lon2)\n\nCompute the great-circle distance between the points (lat1,lon1) and (lat2,lon2). The units of all input and output parameters are degrees.\n\n\n\n\n\nd = distance([lon1,lat1],[lon2,lat2])\n\nThe same as distance(lat1,lon1,lat2,lon2) but there the arguments are vectors and the order is longitude then latitude.\n\nThe units of all input and output parameters are degrees.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.interp","page":"DIVAnd.jl documentation","title":"DIVAnd.interp","text":"f = interp(xi,fi,x)\n\nInterpolate field fi (n-dimensional array) defined at xi (tuble of n-dimensional arrays or vectors) onto grid x (tuble of n-dimensional arrays). The grid in xi must be align with the axis (e.g. produced by DIVAnd.ndgrid).\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.backgroundfile","page":"DIVAnd.jl documentation","title":"DIVAnd.backgroundfile","text":"fun = backgroundfile(fname,varname)\n\nReturn a function fun which is used in DIVAnd to make anomalies out of observations based relative to the field defined in the NetCDF variable varname in the NetCDF file fname. It is assumed that the NetCDF file has the variable lon, lat and depth. And that the NetCDF variable is defined on the same grid as the analysis.\n\n\n\n\n\nfun = backgroundfile(fname,varname,TS)\n\nReturn a function fun which is used in DIVAnd to make anomalies out of observations based relative to the field defined in the NetCDF variable varname in the NetCDF file fname. It is assumed that the NetCDF file has the variable lon, lat and depth. And that the NetCDF variable is defined on the same grid as the analysis and was generated according to the provided time selector TS (TimeSelectorYearListMonthList or TimeSelectorRunningAverage).\n\nnote: Note\nAt all vertical levels, there should be at least one sea point.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Quadtrees.checkduplicates","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.checkduplicates","text":"dupl = checkduplicates(x,value,delta,deltavalue)\n\nBased on the coordinates x (a tuple of longitudes lons, latitudes lats, depths (zs) and times (times vector of DateTime)), search for points which are in the same spatio-temporal bounding  box of length delta. delta is a vector with 4 elements corresponding to longitude, latitude, depth and time (in days). dupl a vector of vectors containing the indices of the duplicates.\n\nnote: Note\nObservations and coordinates should not be NaN or Inf.\n\n\n\n\n\ndupl = checkduplicates(x1,value1,x2,v2,value2,delta,deltavalue)\n\nReport duplicates of observations in data set (x2,v2) which are also in data set (x1,v1). x1 and x2 are tuples of vectors with the coordinates, v1 and v2 are the corresponding values.\n\nnote: Note\nObservations and coordinates should not be NaN or Inf.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_heatmap","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_heatmap","text":"dens,Ltuple,LCV,LSCV = DIVAnd_heatmap(mask,pmn,xi,x,inflation,Labs;Ladaptiveiterations=0,myheatmapmethod=\"DataKernel\",\noptimizeheat=true,nmax=1000,otherargs...)\n\nComputes a  heatmap based on locations of observations using kernel density estimation (probability density field whose integral over the domain is one)\n\nInput:\n\nmask: mask as usual\npmn : tuple of metrics as usual\nxi: tuple of coordinates of the grid for the heatmap\nx : tuple of coordinates of observations\ninflation: array generally of ones. For some applications an observation can carry a different weight which is then encoded in the array\nLabs : the length scales for DIVAnd. Here their meaning is the spread (bandwidth) of the observations for the Kernel calculation. If zero is provided, the routine applies an empirical estimate, returned in the Ltuple output.\nLadaptiveiterations: adaptive scaling where the length scales are adapted on the data density already estimated. You can iterate. Default \"0\"\noptimizeheat : boolean which can turn on or off an algorithmic optimisation. Results should be identical. Default is to optimize\nmyheatmapmethod: can be \"Automatic\", \"GridKernel\" or \"DataKernel\" (Results should be very similar except near boundaries)\nnmax: maximum number of data points. If actual data size is larger, approximatively nmax superobservations are calculated and a warning issued.\notherargs...: all other optional arguments DIVAndrun can take (advection etc)\n\nOutput:\n\ndens: data density field (integral is one)\nLtuple : The bandwidthth used (either the input value or the calculated ones)\nLCV : Likelihood Cross Validation estimator value (the higher the better) leave one out approach\nLSCV : Least Square Cross Validation estimator (the lower the better) leave-one-out approach\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAndfun","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAndfun","text":"myfunny=DIVAndfun(x,f;mask=nothing,pmn=nothing,xi=nothing,len=nothing,epsilon2=nothing,kwargs...)\n\nProvides a simplified interface to  DIVAndrun and in return provides an interpolation FUNCTION rather than the gridded field of DIVAndrun\n\nYou can use ALL paramters you can use with DIVAndrun, but some of them are made optional here by using keywords.\n\nThe necessary input is the tuple of coordinates at which you have data points and the corresponding vector of data.\n\nThe output  is an interpolation function you can call at any coordinate in a hypercube defined by the bounding box of your input data or the domain explicitely defined by keyword xi\n\nIf the user want more control on the grid he needs at least to provide xi, here with option to just provide vectors of coordinates in each direction (only works anyway for this case)  so xi can be a tuple of vectors\n\nYou can use all keyword parameters of divand\n\nInput:\n\nx: tuple of arrays of coordinates\nf: the value of the function to interpolate at the coordinates x`\n\nOutput:\n\nmyfunny: the interpolation function. If you had two dimensional input (i.e. x was a tuple of two coordinates), you can evaluate the interpolation as myfunny(0.1,0.2) for example\n\n\n\n\n\n","category":"function"},{"location":"#Bathymetry-and-spatial-temporal-domain","page":"DIVAnd.jl documentation","title":"Bathymetry and spatial-temporal domain","text":"","category":"section"},{"location":"#DIVAnd.load_bath","page":"DIVAnd.jl documentation","title":"DIVAnd.load_bath","text":"xi,yi,bath = DIVAnd.load_bath(bath_name,isglobal,xi,yi)\n\nLoad the bathymetry from the netCDF file bathname. The parameter isglobal is true if the NetCDF file covers the whole globe and thus the last longitude point can be considered to be right next to the first longitude point. xi and yi are vectors containing the longitude and latitude grid onto which the bathymetry should be interpolated.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.extract_bath","page":"DIVAnd.jl documentation","title":"DIVAnd.extract_bath","text":"bx,by,b = DIVAnd.extract_bath(bath_name,isglobal,xi,yi)\n\nExtract the bathymetry from the NetCDF file bathname. The parameter isglobal is true if the NetCDF file covers the whole globe and thus the last longitude point can be considered to be right next to the first longitude point. xi and yi are vectors defining the bounding box of the data. No interpolation is performed.\n\nConvention: b is positive in the water and negative in the air.\n\nThe NetCDF file is expected to have the one dimensional variables lon and lat with the longitude (degrees East) and latitude (degrees North) and the two dimentional array bat with the digital terrain model (negative in water and positive above water). The order of the dimension should follow be: longitude and then latitude in Column-major ordering (or latitude and then longitude if the tool ncdump is used, which is based on Row-major ordering).\n\nExample of the output of ncdump -h:\n\nnetcdf gebco_30sec_8 {\ndimensions:\n     lat = 2702 ;\n     lon = 5400 ;\nvariables:\n     double lat(lat) ;\n          lat:long_name = \"Latitude\" ;\n          lat:standard_name = \"latitude\" ;\n          lat:units = \"degrees_north\" ;\n     double lon(lon) ;\n          lon:long_name = \"Longitude\" ;\n          lon:standard_name = \"longitude\" ;\n          lon:units = \"degrees_east\" ;\n     float bat(lat, lon) ;\n          bat:long_name = \"elevation above sea level\" ;\n          bat:standard_name = \"height\" ;\n          bat:units = \"meters\" ;\n\n// global attributes:\n          :title = \"GEBCO\" ;\n}\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.load_mask","page":"DIVAnd.jl documentation","title":"DIVAnd.load_mask","text":"xi,yi,mask = load_mask(bath_name,isglobal,xi,yi,level::Number)\n\nGenerate a land-sea mask based on the topography from the NetCDF file bathname. The parameter isglobal is true if the NetCDF file covers the whole globe and thus the last longitude point can be considered to be right next to the first longitude point. xi and yi are vectors containing the longitude and latitude grid onto which the bathymetry should be interpolated.\n\nConvention: in the water, level is positive and in the air level is negative.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_metric","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_metric","text":"pm,pn = DIVAnd_metric(lon,lat)\n\nCompute metric scale factors pm and pn based on the arrays longitude lon and latitude lat. The variables pm and pn represent the inverse of the local resolution in meters using the mean Earth radius.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.domain","page":"DIVAnd.jl documentation","title":"DIVAnd.domain","text":"mask,(pm,pn),(xi,yi) = DIVAnd.domain(bathname,bathisglobal,lonr,latr)\n\nGenerate a 2D geospatial domain based on the topography from the netCDF file bathname. lonr and latr are expressed in degrees East and North respectively (as are xi and yi). pm and pn are in m⁻¹ (using the the mean Earth radius).\n\n\n\n\n\nmask,(pm,pn,po),(xi,yi,zi) = DIVAnd.domain(bathname,bathisglobal,lonr,latr,depthr; zlevel = :surface)\n\nGenerate a 3D geospatial domain based on the topography from the netCDF file bathname. If zlevel is :surface, then depthr is zero for the sea surface and positive in water (positive is down). If zlevel is :floor, then depthr is zero for the sea floor and positive in water (positive is up).\n\nlonr and latr are expressed in degrees East and North respectively (as are xi and yi). depthr and zi are in meters and pm, pn and po are in m⁻¹ (using the the mean Earth radius).\n\n\n\n\n\nmask,(pm,pn,po,pp),(xi,yi,zi,ti) = domain(bathname,bathisglobal,lonr,latr,depthr,timer)\n\nGenerate a geospatial domain based on the topography from the netCDF file bathname.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_rectdom","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_rectdom","text":"mask,pmn,xyi = DIVAnd_rectdom(coord1,coord2,...)\n\nCreate a \"rectangular\" domain in n dimensions with the coordinates coord1 coord2... assuming a Catersian metric. This functions returns the mask mask, the coordinates (xi,yi,...) and the metric (pm,pn...).\n\nFor example:\n\nmask,(pm,pn),(xi,yi) = DIVAnd_rectdom(range(0,stop=1,length=50),linspace(0,stop=1,length=50))\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_squaredom","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_squaredom","text":"mask,pmn,xyi = DIVAnd_squaredom(n,coord)\n\nCreate a \"square\" domain in n dimensions with the coordinates coord assuming a Cartesian metric. This functions returns the mask mask, the coordinates (xi,yi,...) and the metrics (pm,pn...).\n\nExample\n\nmask,(pm,pn),(xi,yi) = DIVAnd_squaredom(2,range(0,stop=1,length=50))\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.TimeSelectorYW","page":"DIVAnd.jl documentation","title":"DIVAnd.TimeSelectorYW","text":"TS = TimeSelectorYW(years,yearwindow,monthlists)\n\nThe structure TS handles the time aggregation based on years and monthlists. It is similar to TimeSelectorYearListMonthList except that the elements of yearlists are centred around years and span yearwindow years. yearlists is in fact constructed by adding and subtracting yearwindow/2 to every element of years.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.TimeSelectorYearListMonthList","page":"DIVAnd.jl documentation","title":"DIVAnd.TimeSelectorYearListMonthList","text":"TS = TimeSelectorYearListMonthList(yearlists,monthlists)\n\nThe structure TS handles the time aggregation based on yearlists and monthlists. yearlists is a vector of ranges (containing start and end years), for example [1980:1989,1990:1999,2000:2009,2010:2019].\n\nmonthlists is a vector of two-element vector (containing start and end months), for example [1:3,4:6,7:9,10:12].\n\nThe upper bound of a yearlist or monthlist element is considered inclusive. The range of years of 2010:2019 considers all years up to and including the year 2019.\n\nIf a month range spans beyond December, then all months must be specified, e.g. [2:4,5:6,7:9,[10,11,12,1]] or [2:4,5:6,7:9,[10:12;1]]. However using [2:4,5:6,7:9,10:1] (bug!) will result in an empty month range.\n\nExample\n\n# seasonal climatology using all data from 1900 to 2020\n# for winter (December-February), spring, summer, autumn\n\nTS = DIVAnd.TimeSelectorYearListMonthList([1900:2020],[[12,1,2],[3,4,5],[6,7,8],[9,10,11]])\n\nNote that for seasonal analyses, DIVAnd will only select observations within the provided year range (and not pick year-1 for December), for example\n\nusing DIVAnd\nTS = DIVAnd.TimeSelectorYearListMonthList([1900:2020],[[12,1,2],[3,4,5],[6,7,8],[9,10,11]])\nDIVAnd.select(TS,1,[DateTime(1899,12,31), DateTime(1900,1,1)])\n\nThis returns [0,1] i.e. the 1st observation is not used, while the second is used. There is no special case for the month 12.\n\nIf the data from e.g. December 1899 should be considered for a seasonal analysis for the year 1900-2020, one should shift the observations as follows:\n\nobstime_shifted = copy(obstime)\nobstime_shifted[Dates.month.(obstime) .== 12] .+= Dates.Year(1)\n\nThe analysis function should then use obstime_shifted while for the function saveobs is it recommended to use the original obstime vector.\n\n\n\n\n\n","category":"type"},{"location":"#Load-observations","page":"DIVAnd.jl documentation","title":"Load observations","text":"","category":"section"},{"location":"#DIVAnd.saveobs","page":"DIVAnd.jl documentation","title":"DIVAnd.saveobs","text":"DIVAnd.saveobs(filename,xy,ids;\n               type_save = Float32,\n               timeorigin = DateTime(1900,1,1,0,0,0),\n               used = trues(size(ids)),\n               )\n\nSave the location and time of the observations in the netCDF file filename and their identifier ids. xy is a tuple with the vectors longitude, latitude, depth and time (as a vector of DateTime).\n\nOptional arguments:\n\ntype_save: the type to save the data (default Float32). However, the time  is always saved as Float64.\ntimeorigin: time origin for the time units attribute (default is\n\n1900-01-01 00:00:00)\n\nused: allows one to subset the data to save only used variables in the netCDF  file\n\n\n\n\n\nDIVAnd.saveobs(filename,varname,value,xy,ids;\n               type_save = Float32,\n               timeorigin = DateTime(1900,1,1,0,0,0),\n               used = trues(size(ids)),\n               chunksize = 10_000,\n               )\n\nSave value and the location and time of the observation in the NetCDF file filename and their identifier ids. xy is a tuple with the vectors longitude, latitude, depth and time (as a vector of DateTime). The values will be saved in the variable called varname.\n\nOptional arguments:\n\ntype_save: the type to save the data (default Float32). However, the time  is always saved as Float64.\ntimeorigin: time origin for the time units attribute (default is\n\n1900-01-01 00:00:00)\n\nused: allows to subset the data to save only used variables in the netCDF  file\n\nNote: in order to save only the observations used in the interpolation, one can use the dbinfo object as follows:\n\nobsused = dbinfo[:used] # returned by diva3d\nDIVAnd.saveobs(filename,(obslon,obslat,obsdepth,obstime),obsids,used=obsused)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.loadobs","page":"DIVAnd.jl documentation","title":"DIVAnd.loadobs","text":"obsvalue,obslon,obslat,obsdepth,obstime,obsids = loadobs(T,filename,varname)\nobsvalue,obslon,obslat,obsdepth,obstime,obsids = loadobs(T,filenames,varname)\n\nLoad the variable varname from the netCDF file filename (or list of filenames). Coordinates (the netCDF variables \"obslon\", \"obslat\", \"obsdepth\"), time (\"obstime\") and identifiers (\"obsids\") will also be loaded. Numeric output arguments will have the type T.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.NCSDN.load","page":"DIVAnd.jl documentation","title":"DIVAnd.NCSDN.load","text":"obsvalue,obslon,obslat,obsdepth,obstime,obsids = load(T,\n  fname,param; qualityflags = [GOOD_VALUE, PROBABLY_GOOD_VALUE])\n\n\n\n\n\ndata,lon,lat,z,time,ids = SDN.load(T,fnames,param; qualityflags = ...)\n\nLoad all data in the vector of file names fnames corresponding to the parameter param as the data type T. Only the data with the quality flags SDN.good_data and SDN.probably_good_data are loaded per default. The output parameters correspond to the data, longitude, latitude, depth, time (as DateTime) and an identifier (as String).\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.NCSDN.loadvar","page":"DIVAnd.jl documentation","title":"DIVAnd.NCSDN.loadvar","text":"data = loadvar(ds,param;\n               fillvalue::T = NaN,\n               qualityflags = [GOOD_VALUE, PROBABLY_GOOD_VALUE],\n               qfname = param * QC_SUFFIX,\n               )\n\nLoad the netCDF variable param from the NCDataset ds. Data points not having the provide quality flags will be masked by fillvalue. qfname is the netCDF variable name for the quality flags.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.NCODV.load","page":"DIVAnd.jl documentation","title":"DIVAnd.NCODV.load","text":"obsvalue,obslon,obslat,obsdepth,obstime,obsids = NCODV.load(T,fname,long_name;\n     qv_flags = [\"good_value\",\"probably_good_value\"],\n     nchunk = 10)\n\nLoad all profiles from the file fname corresponding to netCDF variable with the long_name attribute equal to the parameter long_name. qv_flags is a list of strings with the quality flags to be kept. The filtering of the quality flags is applied to the data variables, time and depth coordinates. obsids is a vector of strings with the EDMO code and local CDI id concatenated by a hyphen.\n\nnchunk is the number of profiles read at a time. Large values of nchunk can increase performance but require also more memory.\n\nThe variables with the following standard_name should exist:\n\nlongitude\nlatitude\ntime\n\nAs well as the variables with the following long_name:\n\nLOCAL_CDI_ID\nEDMO_code or EDMO_CODE\nDepth\n\nA guide explaining how to export NetCDF files from ODV is available here\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.loaddata","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.loaddata","text":"data = loaddata(sheet,profile,locname,fillvalue; fillmode = :repeat)\n\nLoad a single column referred by the local name locname in the profile profile from the ODV spreadsheet sheet. Empty values are either replaced by fillvalue (if fillmode is :fill) or the previous value if repeated (if fillmode is :repeat)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.parsejd","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.parsejd","text":"dt = parsejd(t)\n\nConvert a Chronological Julian Day Number to a DateTime object. The reference value is taken from Chronological Julian Date\n\nFrom the SDN standard: \"A real number representing the Chronological Julian Date, which is defined as the time elapsed in days from 00:00 on January 1 st 4713 BC. ... \"\n\nThe time origin is not noon (12:00) on Monday, January 1, 4713 BC as for the Julia Date Number.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.myparse","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.myparse","text":"v = myparse(T,s, i)\n\nParse the string s as a type T. Unlike Julia's parse function an error message contains the string s (which could not be parsed) for debugging.\n\n\n\n\n\n","category":"function"},{"location":"#Parameter-optimization","page":"DIVAnd.jl documentation","title":"Parameter optimization","text":"","category":"section"},{"location":"#DIVAnd.DIVAnd_cv","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_cv","text":"bestfactorl,bestfactore, cvval,cvvalues, x2Ddata,y2Ddata,cvinter,xi2D,yi2D = DIVAnd_cv(mask,pmn,xi,x,f,len,epsilon2,nl,ne,method;...);\n\nPerforms a cross validation to estimate the analysis parameters (correlation length and signal-to-noise ratio).\n\nInput\n\nSame as for DIVAndrun with three more parameters nl,ne and method\n\nmask: binary mask delimiting the domain. true is inside and false outside.\n\nFor oceanographic application, this is the land-sea mask.\n\npmn: scale factor of the grid. pmn is a tuple with n elements. Every      element represents the scale factor of the corresponding dimension. Its      inverse is the local resolution of the grid in a particular dimension.\nxi: tuple with n elements. Every element represents a coordinate of the final grid on which the observations are interpolated\nx: tuple with n elements. Every element represents a coordinate of the observations\nf: value of the observations minus the background estimate (m-by-1 array).   (see note)\nlen: correlation length\nepsilon2: error variance of the observations (normalized by the error variance of the background field). epsilon2 can be a scalar (all observations have the same error variance and their errors are decorrelated), a vector (all observations can have a difference error variance and their errors are decorrelated) or a matrix (all observations can have a difference error variance and their errors can be correlated). If epsilon2 is a scalar, it is thus the inverse of the signal-to-noise ratio.\nnl: number of testing points around the current value of L. 1 means one additional point on both sides of the current L. 0 is allowed and means the parameter is not optimised.\nne: number of testing points around the current value of epsilon2. 0 is allowed as for nl\nmethod: cross validation estimator method 1: full CV 2: sampled CV 3: GCV 0: automatic choice between the three possible ones, default value\nOptional input arguments specified via keyword arguments are the same as for DIVAnd\n\nOutput:\n\nbestfactorl: best estimate of the multiplication factor to apply to len\nbestfactore: best estimate of the multiplication factor to apply to epsilon2\ncvvales : the cross validation values calculated\nfactors : the tested multiplication factors\ncvinter : interpolated cv values for final optimisation\nX2Data, Y2Data : coordinates of sampled cross validation in L,epsilon2 space . Normally only used for debugging or plotting\nXi2D, Yi2D : coordinates of interpolated estimator . Normally only used for debugging or plotting\n\nThe output bestfactorl and bestfactore represent multiplication factors which should be applied to L and epsilon2.\n\nThe len and epsilon2 provided should be close the real one as the tests will be performed around.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.empiriccovar","page":"DIVAnd.jl documentation","title":"DIVAnd.empiriccovar","text":"distx,covar,corr,varx,count = empiriccovar(x,v,distbin,mincount;\n                          maxpoints = 10000,\n                          distfun = (xi,xj) -> sqrt(sum(abs2,xi-xj)))\n\nCompute the covariance, correlation and variance of a cloud of data points with the value v (a vector) and the location x (a tuple of vectors) grouped by distance. Random pairs are choosen and grouped by their distance (computed by distfun) in bins defined by distbin. The function try to fill at least mincount of data points in each bin but always stop after considering maxpoints pairs.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.fithorzlen","page":"DIVAnd.jl documentation","title":"DIVAnd.fithorzlen","text":"lenxy,dbinfo = DIVAnd.fithorzlen(x,value,z)\n\nDetermines the horizontal correlation length lenxy based on the measurements value at the location x (tuple of 3 vectors corresponding to longitude, latitude and depth) at the depth levels defined in z.\n\nOptional arguments:\n\nsmoothz (default 100): spatial filter for the correlation scale\nsearchz (default 50): vertical search distance (can also be a function of the depth)\nmaxnsamp (default 5000): maximum number of samples\nlimitlen (default false): limit correlation length by mean distance between  observations\nlimitfun (default no function): a function with two arguments (depth and\n\nestimated correlation length) which returns an adjusted correlation length. For example to force the correlation length to be between 300 km and 50 km one would use the following: limitfun = (z,len) -> max(min(len,300_000),10_000)). If provided limitfun is used before and after the smoothing.\n\nepsilon2 (default is a vector of the same size as value with all elements  equal to 1): the relative error variance of the observations. Less reliable  observations would have a larger corresponding value.\ndistfun: function computing the distance between the points xi and xj.\n\nPer default it represents the Euclidian distance.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.fitvertlen","page":"DIVAnd.jl documentation","title":"DIVAnd.fitvertlen","text":"lenz,dbinfo = DIVAnd.fitvertlen(x,value,z,...)\n\nSee also DIVAnd.fithorzlen\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.lengraddepth","page":"DIVAnd.jl documentation","title":"DIVAnd.lengraddepth","text":"RL = lengraddepth(pmn,h, L;\n                  h2 = h,\n                  hmin = 0.001\n                  )\n\nCreate the relative correlation length-scale field RL based on the bathymetry h and the metric pmn (tuple of arrays). Effectively the correlation-length scale is close to zero if the relative bathymetry gradients (|∇h|/h) are smaller  than the length-scale L (in consistent units as pmn).\n\nR_L = 1 / (1 + L |∇h| / max(h2,hmin))\n\nPer default h2 is equal to h. The depth h must be positive. hmin must have the same units as h (usually meters).\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_cvestimator","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_cvestimator","text":"theta = DIVAnd_cvestimator(s,residual)\n\nComputes the cross validation estimator (d-hatd)^T mathbf R^-1 (d-hatd)  ( mathbf 1^T mathbf R^-1 mathbf 1) where the hatd is the analysis not using a data point.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.weight_RtimesOne","page":"DIVAnd.jl documentation","title":"DIVAnd.weight_RtimesOne","text":" weights = weight_RtimesOne(x,len)\n\nCompute the weight of the observations at location x to reduce the influence of locally clustered data. x is a tuple with n elements: every element represents a coordinate of the observations. len is a tuple of arrays representing the correlation length. len[i] is the correlation length in the i-th dimension.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Rtimesx!","page":"DIVAnd.jl documentation","title":"DIVAnd.Rtimesx!","text":"Rtimesx!(coord,LS,x,Rx)\n\nGaussian type R matirx in ndim dimensions applied to vector x of length ndata. The Gaussian scale differs in each direction k : LS[k] Coordinates of point i are coord[i,1],coord[i,2],...,coord[i,ndim] To avoid an ndata² complexity a grid is set up first so as to allow only the calculation of covariances when distances are smaller than 3*LS\n\nAdapted from DIVA3D/src/Fortran/Util/Rtimesx_weighting.f90\n\n\n\n\n\n","category":"function"},{"location":"#Vocabulary","page":"DIVAnd.jl documentation","title":"Vocabulary","text":"","category":"section"},{"location":"#DIVAnd.Vocab.@urn_str","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.@urn_str","text":"urn\"SDN:x:y:z'\n\nResolve a SeaDataNet URN (Uniform Resource Name) using https://www.seadatanet.org/urnurl/\n\n\n\n\n\n","category":"macro"},{"location":"#DIVAnd.Vocab.CFVocab","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.CFVocab","text":"collection = Vocab.CFVocab()\ncollection = Vocab.CFVocab(url = url)\n\nCreate a Dict-like object represeting the NetCDF CF Standard Name vocabulary. If the url is not provided then current CF Standard Name list http://cfconventions.org/Data/cf-standard-names/current/src/cf-standard-name-table.xml is used. Individual standard names are retirved by indexing which return an object of the type CFEntry:\n\ncollection = Vocab.CFVocab()\nentry = collection[\"sea_water_temperature\"]\n\n\n\n\n\n","category":"type"},{"location":"#Base.haskey-Tuple{DIVAnd.Vocab.CFVocab, Any}","page":"DIVAnd.jl documentation","title":"Base.haskey","text":"bool = haskey(collection::CFVocab,stdname)\n\nReturn true if stdname is part of the NetCDF CF Standard Name vocabulary collection.\n\n\n\n\n\n","category":"method"},{"location":"#DIVAnd.Vocab.SDNCollection","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.SDNCollection","text":"collection = SDNCollection(name)\n\nOpen the SeaDataNet collection with the name name at the URL http://www.seadatanet.org/urnurl/collection/ The collection can be indexed with brackets using the identifier.\n\nusing DIVAnd\ncollection = Vocab.SDNCollection(\"P01\")\nconcept = collection[\"PSALPR01\"]\n@show Vocab.prefLabel(concept)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.prefLabel","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.prefLabel","text":"s = Vocab.prefLabel(c::Vocab.Concept)\n\nReturn the preferred label of a concept c\n\n\n\n\n\ns = Vocab.prefLabel(urn::AbstractString)\n\nReturn the preferred label of a concept usings it URN (Uniform Resource Name)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.altLabel","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.altLabel","text":"s = Vocab.altLabel(c::Vocab.Concept)\n\nReturn the alternative label of a concept c\n\n\n\n\n\ns = Vocab.altLabel(urn::AbstractString)\n\nReturn the alternative label of a concept usings it URN (Uniform Resource Name)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.notation","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.notation","text":"s = Vocab.notation(c::Vocab.Concept)\n\nReturn the identifier of a concept c\n\n\n\n\n\ns = Vocab.notation(urn::AbstractString)\n\nReturn the identifier of a concept usings it URN (Uniform Resource Name)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.definition","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.definition","text":"s = Vocab.definition(c::Vocab.Concept)\n\nReturn the definition of a concept c\n\n\n\n\n\ns = Vocab.definition(urn::AbstractString)\n\nReturn the definition of a concept usings it URN (Uniform Resource Name)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.resolve","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.resolve","text":"entry = Vocab.resolve(urn)\n\nResolve a SeaDataNet URN (Uniform Resource Name) and returns the corresponding EDMO entry or Vocabulary concept. For example:\n\nconcept = Vocab.resolve(\"SDN:P021:current:TEMP\")\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.find","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.find","text":"concepts = Vocab.find(c::Concept,name,collection)\n\nReturn a list of related concepts in the collection collection. name can be the string \"related\", \"narrower\", \"broader\".\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.description","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.description","text":"str = description(entry::CFEntry)\nstr = canonical_units(entry::CFEntry)\n\nReturn the description or the canonical units of the `entry`.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.canonical_units","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.canonical_units","text":"str = description(entry::CFEntry)\nstr = canonical_units(entry::CFEntry)\n\nReturn the description or the canonical units of the `entry`.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Vocab.splitURL","page":"DIVAnd.jl documentation","title":"DIVAnd.Vocab.splitURL","text":"collection,tag,key = Vocab.splitURL(url)\n\nSplit a concept URL into collection, tag and key. url must finishe with a slash.\n\n\n\n\n\n","category":"function"},{"location":"#Post-processing","page":"DIVAnd.jl documentation","title":"Post-processing","text":"","category":"section"},{"location":"#DIVAnd.derived","page":"DIVAnd.jl documentation","title":"DIVAnd.derived","text":"DIVAnd.derived(filename,varname,new_filename;\n             error_thresholds = [(\"L1\", 0.3), (\"L2\", 0.5)],\n             )\n\nCompute derived quantities from a DIVAnd analyse (in particular the deepest value of an analysis) using the NetCDF file filename with the variable varname. The result will be written in new_filename.\n\nSee DIVAnd.diva3d for the optional parameter error_thresholds.\n\nExample\n\nusing DIVAnd\nfilename = \"Water_body_dissolved_oxygen_concentration_monthly.nc\"\nnew_filename = \"Water_body_dissolved_oxygen_concentration_monthly2.nc\"\nvarname = \"Water body dissolved oxygen concentration\"\nDIVAnd.derived(filename,varname,new_filename)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.cut","page":"DIVAnd.jl documentation","title":"DIVAnd.cut","text":"DIVAnd.cut(filename,varname,filename_cut,polygon_lon,polygon_lat)\n\nExclude all grid cells points of the netcdf file filename with the variable varname to the grid cell included in the polygon whose vertices are defined by the vector of longitude values polygon_lon and the vector of latitude values polygon_lat. Values outside of this polygone will be croped (if possible) or masked (if croping is not possible).\n\nOnly the NetCDF variable with the dimensions lon and lat will be modified. All other variarables (in particular obslon, obslat, ...) will not be changed.\n\nExample\n\nfilename2 = \"Water_body_dissolved_oxygen_concentration_monthly.nc\"\n# polygon with the area to retain\npolygon_lon = [-20., 20, 20, -19]\npolygon_lat = [21, 21, 53., 52.]\nvarname = \"Water body dissolved oxygen concentration\"\nfilename_cut = \"cut.nc\"\nDIVAnd.cut(filename2,varname,filename_cut,polygon_lon,polygon_lat)\n\n\n\n\n\n","category":"function"},{"location":"#Internal-API-or-advanced-usage","page":"DIVAnd.jl documentation","title":"Internal API or advanced usage","text":"","category":"section"},{"location":"#State-vector","page":"DIVAnd.jl documentation","title":"State vector","text":"","category":"section"},{"location":"#DIVAnd.statevector","page":"DIVAnd.jl documentation","title":"DIVAnd.statevector","text":"sv = statevector((mask1, mask2, ...))\n\nInitialize structure for packing and unpacking multiple variables given their corresponding land-sea mask.\n\nInput:   mask1, mask2,...: land-sea mask for variable 1,2,... Sea grid points correspond to one and land grid points to zero.     Every mask can have a different shape.\n\nOutput:   sv: structure to be used with pack and unpack.\n\nNote: see also pack, unpack\n\n\n\n\n\n","category":"type"},{"location":"#DIVAnd.pack","page":"DIVAnd.jl documentation","title":"DIVAnd.pack","text":"x = pack(sv,(var1, var2, ...))\n\nPack the different variables var1, var2, ... into the vector x where sv is a statevector under the control of a mask. Only sea grid points are retained.\n\nInput:   sv: structure generated by statevector_init.   var1, var2,...: variables to pack (with the same shape as the corresponding masks).\n\nOutput:   x: vector of the packed elements. The size of this vector is the number of elements of all masks equal to 1.\n\nNotes: If var1, var2, ... have an additional trailing dimension, then this dimension is assumed to represent the different ensemble members. In this case x is a matrix and its last dimension is the number of ensemble members.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.unpack","page":"DIVAnd.jl documentation","title":"DIVAnd.unpack","text":"var1, var2, ... = unpack(sv,x)\nvar1, var2, ... = unpack(sv,x,fillvalue)\n\nUnpack the vector x into the different variables var1, var2, ... where sv is a statevector.\n\nInput:   sv: structure generated by statevector_init.   x: vector of the packed elements. The size of this vector is the number of elements equal to 1     in all masks.\n\nOptional input parameter:   fillvalue: The value to fill in var1, var2,... where the masks correspond to a land grid point. The default is zero.\n\nOutput:   var1, var2,...: unpacked variables.\n\nNotes: If x is a matrix, then the second dimension is assumed to represent the different ensemble members. In this case, var1, var2, ... have also an additional trailing dimension.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.sub2ind","page":"DIVAnd.jl documentation","title":"DIVAnd.sub2ind","text":"ind = statevector_sub2ind(sv,subscripts)\n\nCompute from a tuple of subscripts the linear index in the packed state vector. The first element of the subscript indicates the variable index and the remaining the spatial subscripts.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ind2sub","page":"DIVAnd.jl documentation","title":"DIVAnd.ind2sub","text":"subscripts = ind2sub(sv,index)\n\nCompute from linear index in the packed state vector a tuple of subscripts. The first element of the subscript indicates the variable index and the remaining the spatial subscripts.\n\n\n\n\n\n","category":"function"},{"location":"#Base.length","page":"DIVAnd.jl documentation","title":"Base.length","text":"number of points per node it is always zero for non-leaf nodes\n\n\n\n\n\n","category":"function"},{"location":"#Constraints","page":"DIVAnd.jl documentation","title":"Constraints","text":"","category":"section"},{"location":"#DIVAnd.DIVAnd_constr_fluxes","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_constr_fluxes","text":"c = DIVAnd_constr_fluxes(s,topographyforfluxes,fluxes,epsfluxes,pmnin)\n\nCreates integral constraints for each latitude so that a barotropic correction step leads to an additional flux prescribed.\n\nInput:   s: structure   topographyforfluxes: tuple of two 2D arrays with the bottom topography used for the flux calculations               DO NOT USE NaN in it. If an array is replaced by a scalar zero, the constraint is not used.               for fluxes calculated with geostrophy apply g/f to h   fluxes: tuple of two arrays of fluxes. The barotropic correction on elevation should be such that                         Sum over longitude at each latidute of Sum h δ(eta)/δx   δx = - fluxes[1]                         Sum over latitude  at each longitude of Sum h δ(eta)/δy  δ y = -fluxes[2]             WARNING: This has been coded to directly use geostrophy.jl output and flux directions   epsfluxes: error variance on constraint. Scaling to be verified   pmnin: metrics from the calling routine\n\nOutput:   c: structure to be used by DIVAnd_addc with the following fields: R (a     covariance matrix), H (extraction operator) and yo (specified value for     the constrain).\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_constr_constcoast","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_constr_constcoast","text":"c = DIVAnd_constr_constcoast(mask,eps2)\n\nConstrain imposing that the gradients along the coastline defined by mask are close to zero controlled by the parameter eps2 which represents the scaled error variance on the gradients.\n\nThis constrain is useful to indirectly impose that a stream function does not have a current component perpendicular to the coastline.\n\n\n\n\n\n","category":"function"},{"location":"#ODV-files","page":"DIVAnd.jl documentation","title":"ODV files","text":"","category":"section"},{"location":"#DIVAnd.ODVspreadsheet.listSDNparams","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.listSDNparams","text":"p = listSDNparam(ODVData)\n\nReturn a list of SeaDataNet P01 parameters in a ODV spreadsheet ODVData.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.load","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.load","text":" obsvalue,obslon,obslat,obsdepth,obstime,obsids = load(T,fnames,datanames;\n    qv_flags = [DIVAnd.ODVspreadsheet.GOOD_VALUE,\n                DIVAnd.ODVspreadsheet.PROBABLY_GOOD_VALUE],\n    nametype = :P01,\n    qvlocalname = \"QV:SEADATANET\")\n\nLoad all the profiles from every files listed in the array fnames corresponding to one of the parameter names datanames. If nametype is :P01 (default), the datanames are P01 vocabulary names with the SDN prefix. If nametype is :localname, then they are the ODV column header without units.\n\nFor example if the column header is Water body salinity [per mille], then datenames should be [\"Water body salinity\"]. The resulting vectors have the data type T (expect times and ids which are vectors of DateTime and String respectively). Only values matching the quality flag qv_flags are retained. qv_flags is a vector of Strings (based on http://vocab.nerc.ac.uk/collection/L20/current/, e.g. \"1\" means \"good value\"). One can also use the constants these constants (prefixed with DIVAnd.ODVspreadsheet.):\n\nqvlocalname is the column name to denote quality flags. It is assumed that the quality flags follow immediately the data column.\n\nconstant value\nNO_QUALITY_CONTROL \"0\"\nGOOD_VALUE \"1\"\nPROBABLY_GOOD_VALUE \"2\"\nPROBABLY_BAD_VALUE \"3\"\nBAD_VALUE \"4\"\nCHANGED_VALUE \"5\"\nVALUE_BELOW_DETECTION \"6\"\nVALUE_IN_EXCESS \"7\"\nINTERPOLATED_VALUE \"8\"\nMISSING_VALUE \"9\"\nVALUE_PHENOMENON_UNCERTAIN \"A\"\n\nIf the ODV does not contain a semantic header (e.g. for the aggregated ODV files), then local names must be used.\n\njulia> data,obslon,obslat,obsdepth,obstime,obsids = DIVAnd.ODVspreadsheet.load(Float64,[\"data_from_med_profiles_non-restricted_v2.txt\"],\n      [\"Water body salinity\"]; nametype = :localname );\n\nIn order to read ODV spreasheet containing World Ocean Database file odvfile, one can use a command like:\n\njulia> obsval,obslon,obslat,obsdepth,obstime,obsid = ODVspreadsheet.load(Float64,[odvfile],\n                           [\"Temperature\"]; qv_flags=[\"0\", \"1\"], nametype = :localname, qvlocalname = \"QV:WOD\");\n\ni.e.,\n\nexplicitely specifying the accepted flags qv_flags\nset qvlocalname as \"QV:WOD\".\n\nNote: no checks are performed to ensure the units are consistent.\n\n\n\n\n\n profiles,lons,lats,depths,times,ids = load(T,dir,P01names)\n\nLoad all the ODV files under the directory dir corresponding the one of the parameter names P01names. The resulting vectors have the data type T (expect times and ids which are vectors of DateTime and String, respectively).\n\nNo checks are done to ensure the units are consistent.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.localnames","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.localnames","text":"list = localnames(sheet,P01name)\n\nReturn a list list of all local names mapping to the specified P01name in the ODV spreadsheet sheet without the prefix \"SDN:LOCAL:\".\n\n\n\n\n\nlist = localnames(sheet)\n\nReturn a list list of all local names  in the ODV spreadsheet sheet without the prefix \"SDN:LOCAL:\" in the order as they appear in the ODV file.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.Spreadsheet","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.Spreadsheet","text":"Define composite type that will contain:\n\nthe metadata (dictionary),\nSDN parameter mapping (dictionary)\nthe column labels (array) and\nthe profiles (array of arrays).\n\n\n\n\n\n","category":"type"},{"location":"#DIVAnd.ODVspreadsheet.loadprofile","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.loadprofile","text":" data,data_qv,obslon,obslat,obsdepth,obsdepth_qv,obstime,obstime_qv,EDMO,LOCAL_CDI_ID =\n loadprofile(T,sheet,iprofile,dataname; nametype = :P01)\n\nLoad a iprofile-th profile from the ODV spreadsheet sheet of the parameter dataname. If nametype is :P01 (default), the dataname is the P01 vocabulary name with the SDN prefix. If nametype is :localname, then it is the ODV column header.  The resulting vectors have the data type T (expect the quality flag and obstime) .\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.loaddataqv","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.loaddataqv","text":"data,data_qv = loaddataqv(sheet,profile,locname,fillvalue; fillmode = :repeat)\n\nThe same as loaddata, but now the quality flag are also loaded.\n\nprofile[i][j] is the j-th column of the i-th row of a profile. profile[i,j] is the i-th column of the j-th row of a profile.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.SDNparse!","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.SDNparse!","text":"SDNparse!(col,fillmode,fillvalue,data)\n\nParse the list of String col into the corresponding data type of the vector data. Empty values are either replaced by fillvalue (if fillmode is :fill) or the previous value if repeated (if fillmode is :repeat)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.colnumber","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.colnumber","text":"cn = colnumber(sheet,localname)\n\nReturn the column number cn of the first column with the local name localname (without the prefix \"SDN:LOCAL:\") in the ODV spreadsheet sheet.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ODVspreadsheet.nprofiles","page":"DIVAnd.jl documentation","title":"DIVAnd.ODVspreadsheet.nprofiles","text":"n = nprofiles(ODVData)\n\nReturn the number of profiles in a ODV Spreadsheet ODVData loaded by readODVspreadsheet.\n\n\n\n\n\n","category":"function"},{"location":"#Operators","page":"DIVAnd.jl documentation","title":"Operators","text":"","category":"section"},{"location":"#DIVAnd.sparse_interp","page":"DIVAnd.jl documentation","title":"DIVAnd.sparse_interp","text":"H,out = sparse_interp(mask,I)\n\nCreate interpolation matrix from mask and fractional indexes I.\n\nInput:   mask: 0 invalid and 1 valid points (n-dimensional array)   I: fractional indexes (2-dim array n by mi, where mi is the number of points to interpolate) Ouput:   H: sparse matrix with interpolation coefficients   out: true if value outside of grid   outbbox: 1 if outise bouding box   onland: 1 if point touches land (where mask == 0)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.sparse_interp_g","page":"DIVAnd.jl documentation","title":"DIVAnd.sparse_interp_g","text":"sparse_interp(x,mask,xi) Interpolate from x onto xi\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.sparse_diff","page":"DIVAnd.jl documentation","title":"DIVAnd.sparse_diff","text":"diffx = sparse_diff(sz1,m,cyclic)\n\nSparse operator for differentiation along dimension m for \"collapsed\" matrix of the size sz1. cyclic is true if domain is cyclic along dimension m. false is the default value\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.matfun_trim","page":"DIVAnd.jl documentation","title":"DIVAnd.matfun_trim","text":"T = matfun_trim(sz1,m)\n\nCreate an operator which trim first and last row (or column) in The field is a \"collapsed\" matrix of the size sz1. m is the dimension to trim.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.matfun_stagger","page":"DIVAnd.jl documentation","title":"DIVAnd.matfun_stagger","text":"S = matfun_stagger(sz1,m,cyclic)\n\nCreate an operator for staggering a field in dimension m. The field is a \"collapsed\" matrix of the size sz1.\n\nInput:   sz1: size of rhs   m: dimension to stagger   cyclic: true if domain is cyclic along dimension m. False is the   default value\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.matfun_diff","page":"DIVAnd.jl documentation","title":"DIVAnd.matfun_diff","text":"Operator for differentiation.\n\ndiffx = matfun_diff(sz1,m,cyclic)\n\nOperator for differentiation along dimension m for \"collapsed\" matrix of the size sz1.\n\nInput:   sz1: size of rhs   m: dimension to differentiate   cyclic: true if domain is cyclic along dimension m. False is the   default value\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.matfun_shift","page":"DIVAnd.jl documentation","title":"DIVAnd.matfun_shift","text":"Operator shifting a field in a given dimension.\n\nfunction S = matfun_shift(sz1,m,cyclic)\n\nOperator shifting a field in the dimension m. The field is a \"collapsed\" matrix of the size sz1.\n\nInput:   sz1: size of rhs   m: dimension to shift   cyclic: true if domain is cyclic along dimension m. False is the     default value\n\n\n\n\n\n","category":"function"},{"location":"#Quadtree","page":"DIVAnd.jl documentation","title":"Quadtree","text":"","category":"section"},{"location":"#DIVAnd.Quadtrees.QT","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.QT","text":"quadtree (of the higher-dimensional equivalent) T the type of the coordinates TA the type of the attributes N number of dimensions\n\n\n\n\n\n","category":"type"},{"location":"#DIVAnd.Quadtrees.rsplit!","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.rsplit!","text":"recursive split\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Quadtrees.add!","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.add!","text":"sucess = add!(qt,x,attrib,max_cap = 10) Add point x with the attribute attrib to the quadtree qt. sucess is true if x is within the bounds of the quadtree node qt (otherwise false and the point has not been added)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Quadtrees.within","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.within","text":"attribs = within(qt,min,max)\n\nSearch all the points within a bounding box defined by the vectors min and max.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Quadtrees.bitget","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.bitget","text":"Test if the n-th bit in a is set. The least significant bit is n = 1.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Quadtrees.inside","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.inside","text":"inside(x0,x1,y)\n\nReturns true of the point y is inside the rectange defined by x0 and x1.\n\n             x1\n  +----------+\n  |          |\n  |   +      |\n  |   y      |\n  +----------+\n x0\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Quadtrees.intersect","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.intersect","text":"Test if the rectanges defined by x0,x1 and y0,y1 intersects/overlap\n\n             x1\n  +----------+\n  |          |\n  |   +----------+ y1\n  |   |      |   |\n  +----------+   |\n x0   |          |\n      |          |\n      +----------+\n     y0\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.Quadtrees.split!","page":"DIVAnd.jl documentation","title":"DIVAnd.Quadtrees.split!","text":"split a single node\n\n\n\n\n\n","category":"function"},{"location":"#Conjugate-gradient","page":"DIVAnd.jl documentation","title":"Conjugate gradient","text":"","category":"section"},{"location":"#DIVAnd.conjugategradient","page":"DIVAnd.jl documentation","title":"DIVAnd.conjugategradient","text":"x,cgsuccess,niter = conjugategradient(fun!,b)\n\nSolve a linear system with the preconditioned conjugated-gradient method: A x = b where A is a symmetric positive defined matrix and b is a vector. Equivalently the solution x minimizes the cost function J(x) = ½ xᵀ A x - bᵀ x.\n\nThe function fun!(x,fx) computes fx which is equal to  A*x. For example:\n\nfunction fun!(x,fx)\n    fx[:] = A*x\nend\n\nNote that the following code will NOT work, because a new array fx would be created and it would not be passed back to the caller.\n\nfunction fun!(x,fx)\n    fx = A*x # bug!\nend\n\nThe function fun! works in-place to reduce the amount of memory allocations.\n\nOptional input arguments\n\nx0: starting vector for the interations\ntol: tolerance on  |Ax-b| / |b|\nmaxit: maximum of interations\npc!: the preconditioner. The functions pc(x,fx) computes fx = M⁻¹ x (the inverse of M times x) where M is a symmetric positive defined matrix. Effectively, the system E⁻¹ A (E⁻¹)ᵀ (E x) = E⁻¹ b is solved for (E x) where E Eᵀ = M. Ideally, M should this be similar to A, so that E⁻¹ A (E⁻¹)ᵀ is close to the identity matrix. The function pc! should be implemented in a similar way than fun! (see above).\n\nOutput\n\nx: the solution\ncgsuccess: true if the interation converged (otherwise false)\nniter: the number of iterations\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.pc_none!","page":"DIVAnd.jl documentation","title":"DIVAnd.pc_none!","text":"pc_none!(x,fx)\n\nDummy call-back function when no preconditioner is used. fx will be equal to x.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.checksym","page":"DIVAnd.jl documentation","title":"DIVAnd.checksym","text":"xAy, yATx = checksym(n,fun!)\n\nCheck if the the function fun! represents a symmetric matrix when applied on random vectors of size n.\n\n\n\n\n\n","category":"function"},{"location":"#Utility-functions","page":"DIVAnd.jl documentation","title":"Utility functions","text":"","category":"section"},{"location":"#DIVAnd.DIVAnd_laplacian","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_laplacian","text":"Create the laplacian operator.\n\nLap = DIVAnd_laplacian(mask,pmn,nu,iscyclic)\n\nForm a Laplacian using finite differences assumes that gradient is zero at \"coastline\"\n\nInput: mask: binary mask delimiting the domain. 1 is inside and 0 outside. For oceanographic application, this is the land-sea mask. pmn: scale factor of the grid. nu: diffusion coefficient of the Laplacian field of the size mask or cell arrays of fields\n\nOutput: Lap: sparce matrix represeting a Laplacian\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_gradient","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_gradient","text":"Dx1,Dx2,...,Dxn = DIVAnd.DIVAnd_gradient(operatortype,mask,pmn,iscyclic)\n\nForm the gradient using finite differences in all n-dimensions. mask is a binary mask delimiting the domain. 1 is inside and 0 outside. For oceanographic application, this is the land-sea mask. pmn is a tuple of arrays with the scale factor of the grid. The output Dx1,Dx2,...,Dxn are sparse matrices represeting a gradient along different dimensions.\n\n\n\n\n\nDx1,Dx2,...,Dxn = DIVAnd.DIVAnd_gradient(operatortype,mask,pmn,iscyclic)\n\nForm the gradient using finite differences in all n-dimensions. mask is a binary mask delimiting the domain. 1 is inside and 0 outside. For oceanographic application, this is the land-sea mask. pmn is a tuple of arrays with the scale factor of the grid. The output Dx1,Dx2,...,Dxn are sparse matrices represeting a gradient along different dimensions.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_obscovar","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_obscovar","text":"R = DIVAnd_obscovar(epsilon2,m)\n\nCreate a matrix representing the observation error covariance R of size m x m.\n\nIf epsilon2 is a scalar, then R = epsilon2 * I If epsilon2 is a vector, then R = diag(epsilon2) If epsilon2 is a matrix, then R = epsilon2\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_adaptedeps2","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_adaptedeps2","text":"factor = DIVAnd_adaptedeps2(s,fi);\n\nInput:\n\ns: structure returned by DIVAndrun\nfi: analysis returned by DIVAndrun\n\nOutput:\n\nfactor : multiplicative factor to apply to epsilon2\n\nUsing Desroziers adaptive approach provides a multiplicative factor for the current epsilon2 value so that factor*epsilon2 is a better estimate of the R matrix. If you cannot use DIVAndrun but use DIVAndgo, the latter provides automatically this pamater as result.\n\n\n\n\n\nDIVAnd_adaptedeps2(yo, residual, diagR, ignoreobs)\n\nUsing Desroziers adaptive approach provides a multiplicative factor for the current epsilon2 value so that factor*epsilon2 is a better estimate of the R matrix.\n\nyo the observations (minus the background), residual the obserations minus the analysis, diagR, the diagonal of the rel. obs. error covariance matrix and ignoreobs is true if an observation is out of the grid or should be ignored for other reasons.\n\nFor unscaled R and assuming that the background is zero, Desroziers showed that:\n\nmean((yᵒ - Hxᵃ) ⋅ yᵒ) =  ϵ² mean(yᵒ ⋅ yᵒ) = σ² +  ϵ²\n\nmean(yᵒ ⋅ yᵒ) / mean((yᵒ - Hxᵃ) ⋅ yᵒ) = σ²/ϵ² + 1 λ = σ²/ϵ² = 1 - mean(yᵒ ⋅ yᵒ) / mean((yᵒ - Hxᵃ) ⋅ yᵒ)\n\nϵ² / σ² = 1 / λ\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_diagHKobs","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_diagHKobs","text":"diagonalterms = DIVAnd_diagHKobs(s)\n\nComputes the diagonal terms of the so called hat-matrix HK, using the already solved analysis and it structure s. Warning: might take some time\n\nThis version only uses the real data (not those related to additional constraints)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_residual","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_residual","text":"dataresidual = DIVAnd_residual(s,fi)\n\nComputes the generalized residual yo - H xa  using the analysis on the grid fi and the solution structure s.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_addc","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_addc","text":"s = DIVAnd_addc(s,c)\n\nAdd a constraint c to the cost function defined by s. The structure s is typically created by DIVAnd_background and the contrain c has the following fields: R (a covariance matrix), H (extraction operator) and yo (specified value for the constrain). The added contrain Jc(x) is quadratic and has the following structure.\n\nJc(x) = (H x - yo)ᵀ R⁻¹ (H x - yo)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_erroratdatapoints","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_erroratdatapoints","text":"errorvariance = DIVAnd_erroratdatapoints(s;restrictedlist=[])\n\nComputes the error at the real data locations using the analysis structure s\n\nIf a restricedlist is provided erros are only calculated at the indexes where restricedlist==true\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_GCVKii","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_GCVKii","text":"Computes an estimate of the mean value of the diagonal of HK using GCV and the already solved analysisand it structure s\n\nKii = DIVAnd_GCVKii(s);\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_fittocpu","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_fittocpu","text":" stepsize,overlapping,isdirect = DIVAnd_fittocpu(Lpmnrange,gridsize,latercsteps,moddim,MEMTOFIT;forcedirect=false,overlapfactor=3.3);\n\nCreates a list of windows for subsequent domain decomposition\n\nAlso calculates already the subsampling steps csteps for the preconditionners\n\nInput:\n\nLpmnrange: for every dimension the minimum and maximum correlation length scaled by the local resolution (i.e. the product between L and pm (pn,...))\ngridsize: number of points in each direction (size(mask))\nlatercsteps: coarsening steps used later if a lower resolution model is used for preconditioning.\nmoddim: modulo for cyclic dimension (vector with n elements). Zero is used for non-cyclic dimensions.\nmemtofit : parameter describing how much memory is expected to be available in Gb\nforcedirect : if true forces direct solver even if iterative solver might allow for larger tiles\noverlapfactor : describes how many times the length scale is used for the overlapping. default is 3.3. use lower values ONLY for very good data coverage.\n\nOutput:\n\nstepsize: spatial (and temporal) shift in grid points between subdomains for every dimension (?)\noverlapping: number of overlapping grid points for every dimension\nisdirect: true is the direct solver is activated\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_background","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_background","text":"s = DIVAnd_background(mask,pmn,Labs,alpha,moddim)\n\nForm the inverse of the background error covariance matrix with finite-difference operators on a curvilinear grid\n\nInput:\n\nmask: binary mask delimiting the domain. 1 is inside and 0 outside.       For oceanographic applications, this is the land-sea mask.\npmn: scale factor of the grid.\nLabs: correlation length\nalpha: dimensional coefficients for norm, gradient, laplacian,...    alpha is usually [1,2,1] in 2 dimensions.\n\nOutput:\n\ns: structure containing\ns.iB: inverse of the background error covariance\ns.L: spatially averaged correlation length\ns.n: number of dimensions\ns.coeff: scaling coefficient such that the background variance diag(inv(iB)) is one far away from the boundary.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_obs","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_obs","text":"s = DIVAnd_obs(s,xi,x,R,I)\n\nInclude the constrain from the observations. It is assumed that each coordinate depends only on one index. If this is not the case, then matrix I must be provided.\n\nInput:   s: structure created by DIVAnd_background   xi: coordinates of observations (tuple of vectors)   x: coordinates of grid (tuple of arrays)   R: obs. error covariance matrix (normalized)   I (optional): fractional indexes of location of observation     within the grid\n\nOutput:   s: structure to be used by DIVAnd_factorize\n\nNote: make sure not to mix Float32 and Float64 for DIVAnd_constrain.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_bc_stretch","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_bc_stretch","text":"\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_diagHK","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_diagHK","text":"Computes the diagonal terms of the so called hat-matrix HK, using the already solved analysis and it structure s. Warning: might take some time\n\ndiagonalterms = DIVAnd_diagHK(s);\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_kernel","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_kernel","text":"mu,K,len_scale = DIVAnd_kernel(n,alpha)\n\nReturn the analytical kernel and normalization factor.\n\nAnalytical (normalized) kernels K for infinite domain in dimension n and for coefficients alpha and normalization factor mu.\n\nK(r) is the kernel function (function of the normalized distance r), len_scale is the distance at which K(len_scale) = 0.6019072301972346 (which is besselk(1,1))\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_residualobs","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_residualobs","text":"dataresidual = DIVAnd_residualobs(s,fi);\n\nComputes the residual yo - H xa  only at real data points using the analysis. on the grid fi and the solution structure s.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_aexerr","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_aexerr","text":"aexerr,Bref,fa,sa = DIVAnd_aexerr(mask,pmn,xi,x,f,len,epsilon2;...);\n\nInput: same as for DIVAndrun\n\nmask: binary mask delimiting the domain. true is inside and false outside. For oceanographic application, this is the land-sea mask.\npmn: scale factor of the grid. pmn is a tuple with n elements. Every      element represents the scale factor of the corresponding dimension. Its      inverse is the local resolution of the grid in a particular dimension.\nxi: tuple with n elements. Every element represents a coordinate of the final grid on which the observations are interpolated\nx: tuple with n elements. Every element represents a coordinate of the observations\nf: value of the observations minus the background estimate (m-by-1 array).   (see note)\nlen: correlation length\nepsilon2: error variance of the observations (normalized by the error variance of the background field). epsilon2 can be a scalar (all observations have the same error variance and their errors are decorrelated), a vector (all observations can have a difference error variance and their errors are decorrelated) or a matrix (all observations can have a difference error variance and their errors can be correlated). If epsilon2 is a scalar, it is thus the inverse of the signal-to-noise ratio.\n\nOptional input arguments specified as keyword arguments also as for DIVAnd\n\nOutput:\n\naexerr: the almost exact error\nBref: the background error for error scaling by background aexerr./Bref\nfa: the analysis (with low impact fake data): DO NOT USE UNLESS YOU KNOW WHAT YOU ARE DOING\nsa: the associated structure\n\nCompute a variational analysis of arbitrarily located observations to calculate the almost exact error\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_cpme","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_cpme","text":"cpme = DIVAnd_cpme(mask,pmn,xi,x,f,len,epsilon2;...);\n\nInput: Same as for DIVAndrun\n\nmask: binary mask delimiting the domain. true is inside and false outside.\n\nFor oceanographic application, this is the land-sea mask.\n\npmn: scale factor of the grid. pmn is a tuple with n elements. Every      element represents the scale factor of the corresponding dimension. Its      inverse is the local resolution of the grid in a particular dimension.\nxi: tuple with n elements. Every element represents a coordinate of the final grid on which the observations are interpolated\nx: tuple with n elements. Every element represents a coordinate of the observations\nf: value of the observations minus the background estimate (m-by-1 array).   (see note)\nlen: correlation length\nepsilon2: error variance of the observations (normalized by the error variance of the background field). epsilon2 can be a scalar (all observations have the same error variance and their errors are decorrelated), a vector (all observations can have a difference error variance and their errors are decorrelated) or a matrix (all observations can have a difference error variance and their errors can be correlated). If epsilon2 is a scalar, it is thus the inverse of the signal-to-noise ratio.\nkeywords : undocumented for the moment how to use iterative solver with coarser grid as preconditionner. see DIVAndjog for csteps, lmask and alphapcparameters\n\nOptional input arguments specified as keyword arguments also as for DIVAnd\n\nOutput:\n\ncpme: the clever poor mans error\n\nPerform an n-dimensional variational analysis of the observations f located at the coordinates x. The array cpme represent the error field at the grid defined by the coordinates xi and the scales factors pmn. If you cannot run DIVAndrun you can use DIVAndgo with error field calculation :cpme\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_cpme_go","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_cpme_go","text":"erri = DIVAnd_cpme_go(mask,pmn,xi,x,f,len,epsilon2; ...);\n\nInput:\n\nSame arguments as DIVAndrun with in addition\nMEMTOFIT=: keyword controlling how to cut the domain depending on the memory remaining available for inversion (not total memory)\nRTIMESONESCALES= : if you provide a tuple of length scales, data are weighted differently depending on the numbers of neighbours they have. See weight_RtimesOne for details\n\nOutput:\n\nerri: relative error field using the clever poor man's error approach. Result on the same grid as fi.\n\nONLY USE THIS VERSION IF YOU CANNOT RUN DIVAndgo with :cmpe activated (or directly DIVAnd_cpme if you can run DIVAndrun)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_datainboundingbox","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_datainboundingbox","text":"xn,fn,indexes,Rn = DIVAnd_datainboundingbox(xi,x,f;Rmatrix=())\n\nInput:\n\nxi: tuple with n elements. Every element represents a coordinate   of the final grid on which the observations are interpolated\n\nx: tuple with n elements. Every element represents a coordinate of the observations\nf: value of the observations\nRmatrix: error variance of the observations (normalized by the error variance of the background field). epsilon2 can be a scalar (all observations have the same error variance and their errors are decorrelated), a vector (all observations can have a difference error variance and their errors are decorrelated) or a matrix (all observations can have a difference error variance and their errors can be correlated). If epsilon2 is a scalar, it is thus the inverse of the signal-to-noise ratio.\n\nOutput:\n\nxn: tuple with n elements. Every element represents a coordinate of   the observations which falls in the bounding box defined by xi fn: the corresponding data indexes: the indexes in the original array retained Rn: the new error variance\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_Lpmnrange","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_Lpmnrange","text":"Lpmnrange = DIVAnd_Lpmnrange(pmn,len);\n\nIn each direction, searches for the minimum and maximum value of the length scale times the metric in this direction\n\nSo it basically looks at the worst and the best resolution found in the grid\n\nInput:\n\npmn: scale factor of the grid. pmn is a tuple with n elements. Every      element represents the scale factor of the corresponding dimension. Its      inverse is the local resolution of the grid in a particular dimension.\nlen: correlation length\n\nOutput:\n\nLpmnrange: Array of range tuples (minimum and maximum of L times metric)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_pc_sqrtiB","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_pc_sqrtiB","text":"Compute a preconditioner using the Cholesky decomposition.\n\n[M1,M2] = DIVAnd_pc_michol(iB,H,R)\n\nCompute preconditioner matrices M1 and M2 based on the Cholesky decomposition of iB. The matrices H and R are not used. M2 is the transpose of M1 for this preconditioner.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_pc_none","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_pc_none","text":"fun = DIVAnd_pc_none(iB,H,R)\n\nDummy function for requiring that no preconditioner is used in DIVAnd.\n\nSee also: diavnd_pc_sqrtiB\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_GCVKiiobs","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_GCVKiiobs","text":"Kii = DIVAnd_GCVKiiobs(s)\n\nComputes an estimate of the mean value of the diagonal of HK using GCV and the already solved analysis and it structure s Only using real data locations.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_cutter","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_cutter","text":"windowlist,csteps,lmask,alphapc = DIVAnd_cutter(Lpmnrange,gridsize,moddim,MEMTOFIT);\n\nCreates a list of windows for subsequent domain decomposition. Also calculates already the subsampling steps csteps for the preconditionners as well as the mask lmask to apply to the length scales in the preconditionner, allowing to reduce the problem size\n\nInput:\n\nLpmnrange:\ngridsize: number of points in each direction (size(mask))\nmoddim:\nMEMTOFIT\noverlapfactor : describes how many times the length scale is used for the overlapping. default is 3.3. use lower values ONLY for very good data coverage.\n\nOutput:\n\nwindowlist: vector of tuples (iw1,iw2,isol1,isol2,istore1,istore2,)   where (iw1,iw2) correspond to the start and end indices in the (global)   grid (isol1,isol2) correspond to the start and end indices solution   to be retained in the window (not all is retained due to overlapping)   and (istore1,istore2) correspond to the start and end indices of the solution   relative to the global grid. They define thus where the local solution has to be   stored in the combined global solution.\ncsteps: Array of steps for the coarse grid preconditionner. csteps is zero for the direct solver.\nlmask: Array of multiplication factors for length scale of preconditionner\nalphapc: Norm defining coefficients for preconditionner\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_qc","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_qc","text":"qcvalues = DIVAnd_qc(fi,s,method);\n\nPerform a quality control of the observations using the interpolated field.\n\nInput:\n\nfi : interpolated field from a DIVAndrun execution\ns: corresponding structure returned by DIVAnd\nmethod : optional argument, which describes the method to be used:\n\n1  as for standard cross validation,  3  as for GCV,  4  with CV estimator to be used outside the routine,  5  Poor man's GCV using data instead of random vector,  0  automatic selection of method.\n\nOutput\n\nqcvalues: quality check values, one for each data point.\n\nThe higher the value, the more suspect a data point is. Absolute values of qcvalues might be not robust when analysis parameters are uncertain. The ranking is however quite robust.\n\nIf you cannot run DIVAndrun but use DIVAndgo (which does not provide a structure s at the output), the latter provides qcvalues if you call DIVAndgo with a keyword parameter QCMETHOD=\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_solve!","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_solve!","text":"Solve the variational problem.\n\n fi = DIVAnd_solve(s)\n\nDerive the analysis based on all contraints included in s and using the observations yo\n\nInput:   s: structure created by DIVAnd_factorize   fi0: starting point for iterative primal methods   f0: starting point for the iterative dual method\n\nbtrunc: the value at which the stored value of s.iB was truncated and needs to be completed on the fly using jmBix\n\nOutput:   fi: analyzed field\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_sampler","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_sampler","text":"samplesteps = DIVAnd_sampler(pmn,len);\n\nDefines steps for sub-sampling in the discrete grid which would still allow\n\none to resolve the provided lengthscales\n\nInput:\n\npmn: scale factor of the grid. pmn is a tuple with n elements. Every      element represents the scale factor of the corresponding dimension. Its      inverse is the local resolution of the grid in a particular dimension.\nlen: correlation length\n\nOutput:\n\nsamplesteps: vector of integers with steps in subsampling [1 2 4 1] means every grid point in x direction, every fifth in y etc\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAndjog","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAndjog","text":"Compute a variational analysis of arbitrarily located observations.\n\n fi,s = DIVAndjog(mask,pmn,xi,x,f,len,epsilon2,csteps,lmask; alphapc=[1,2,1], otherargs...);\n\nPerform an n-dimensional variational analysis of the observations f located at the coordinates x. The array fi represent the interpolated field at the grid defined by the coordinates xi and the scales factors pmn.\n\nInput:\n\nSame parameters as for divarun.       * Two additional parameters:               * csteps: array of ndims values defining the sampling steps for the preconditionner               * lmask: array of ndims mutilplications factors for length scales       * One additional optional parameter               * alphapc: The coefficients for the norm used in the preconditionner\n\nOutput:\n\nfi: the analysed field\ns: structure with an array s.P representing the analysed error covariance\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_background_components","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_background_components","text":"iB = DIVAnd_background_components(s,D,alpha; kwargs...)\n\nForm the different components of the background error covariance matrix. Compute the components of the background error covariance matrix s.iB_ and their sum based on alpha (the adimensional coefficients for norm, gradient, laplacian,...).\n\nIf the optional arguments contains btrunc, the calculation of iB is limited to the term up and including alpha[btrunc]\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.stats","page":"DIVAnd.jl documentation","title":"DIVAnd.stats","text":"meanx,stdx = stats(sumx,sumx2,N)\n\nComputes the mean meanx and the standard deviation stdx from the sum (sumx) and the sum of squares (sumx2) from N numbers.\n\n\n\n\n\nmeanx,meany,stdx,stdy,covar,corr = stats(sumx,sumx2,sumy,sumy2,sumxy,N)\n\nComputes the mean meanx and the standard deviation stdx from the sum (sumx) and the sum of squares (sumx2) from N numbers and similarly for the variable y. The function computes also the Pearson correlation corr and covariance covar between x and y.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.statpos","page":"DIVAnd.jl documentation","title":"DIVAnd.statpos","text":"ulon,ulat = statpos(lon,lat)\nulon,ulat = statpos((lon,lat,...))\n\nReturn unique positions (ulon, ulat) as well their mean, standard deviation and count of the vector of observations val located at the positions lon and lat.\n\n\n\n\n\n(ulon,ulat),meanval,stdval,count = statpos(val,(lon,lat))\n(ulon,ulat,...),meanval,stdval,count = statpos(val,(lon,lat,...))\n\nReturn unique positions (ulon, ulat) as well as their mean, standard deviation and count of the vector of observations val located at the positions lon and lat.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.blkdiag","page":"DIVAnd.jl documentation","title":"DIVAnd.blkdiag","text":"concatenate diagonal matrices\n\n\n\n\n\n","category":"function"},{"location":"#Base.findfirst","page":"DIVAnd.jl documentation","title":"Base.findfirst","text":"findfirst(c::Concept,name,collection)\n\nReturn the first related concepts in the collection collection. name can be the string \"related\", \"narrower\", \"broader\".\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.formatsize","page":"DIVAnd.jl documentation","title":"DIVAnd.formatsize","text":"display size as a string \n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.interp!","page":"DIVAnd.jl documentation","title":"DIVAnd.interp!","text":"interp!(xi,fi,x,f)\n\nInterpolate field fi (n-dimensional array) defined at xi (tuble of n-dimensional arrays or vectors) onto grid x (tuble of n-dimensional arrays). The interpolated field is stored in f. The grid in xi must be align with the axis (e.g. produced by DIVAnd.ndgrid).\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ufill","page":"DIVAnd.jl documentation","title":"DIVAnd.ufill","text":"cfilled = ufill(c,valex)\n\nReplace values in c equal to valex by averages of surrounding points. valex should not be NaN; use ufill(c,isfinite.(c)) or ufill(c,.!isnan.(c)) instead.\n\n\n\n\n\nufill(c::Array{T,2},mask::AbstractArray{Bool}) where T\n\nmask is true where c is valid.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.cgradient","page":"DIVAnd.jl documentation","title":"DIVAnd.cgradient","text":"hx,hy = cgradient(pmn,h)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.fzero","page":"DIVAnd.jl documentation","title":"DIVAnd.fzero","text":"fzero(f,x0,x1,eps; maxiter = Inf) find the zero of the function f between x0 and x1 assuming x0 < x1 at a precision eps.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.localize_separable_grid","page":"DIVAnd.jl documentation","title":"DIVAnd.localize_separable_grid","text":"Derive fractional indices on a separable grid.\n\nI = localize_separable_grid(xi,mask,x)\n\nxi is a tuple of vectors and x and tuple of n-dimensional arrays, e.g.\n\nx1,x2 = ndgrid(2 * collect(1:5),collect(1:6)) x = (x1,x2)\n\nDerive fractional indices where xi are the points (typical discrete observations) to localize in the separable grid x (every dimension in independent on other dimension). The output I is an n-by-m array where n number of dimensions and m number of observations. The corresponding element of I is negative if xi is outside of the grid defined by x.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.decompB!","page":"DIVAnd.jl documentation","title":"DIVAnd.decompB!","text":"work1, work2: size of mask\n\nSymmetric matrix\n\nSB = √(β) (1 + α L)^(nmax / 2) W^{-1}\n\nwhere W is the volumne of the corresponding grid cell. The background error covariance matrix B is SB W SB\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.varanalysis","page":"DIVAnd.jl documentation","title":"DIVAnd.varanalysis","text":"Variational analysis similar to 3D-var\n\nInput:\n\nx0: start vector for iteration, at output it is the last state of the    iteration. Note that x0 is related to the analysis xa by       xa = SB^½ * W^½ * xa\n\n| x + W^½ * SB^½ * H' * (R \\ (H * SB^½ * W^½ * x ))   -   W^½ SB^{½} * H' * (R \\ yo) |      <   tol * s.sv.n / length(yo)  * | W^½ SB^{½} * H' * (R \\ yo) |\n\nKernel is the solution of the n-dimensional diffusion equation\n\n∂c/∂t =  ∇ ⋅ (D ∇ c)\n\nn-dimensional Green’s function\n\nG(x,x',t) = (4πDt)^(-n/2)  exp( - |x -x'|² / (4Dt))\n\nG(x,x',t) = det(D)^(-½) (4π t)^(-n/2)  exp( - (x -x')ᵀ D⁻¹ (x -x') / (4t))\n\nhttp://www.rpgroup.caltech.edu/~natsirt/aph162/diffusion_old.pdf\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.len_harmonize","page":"DIVAnd.jl documentation","title":"DIVAnd.len_harmonize","text":"Len = len_harmonise(len,mask)\n\nProduce a tuple of arrays of the correlation length len which can be either a scalar (homogeneous and isotropic case), a tuple of scalar (homogeneous case) or already a tuple of arrays (general case). The the later case the size of the arrays are veryfied.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.alpha_default","page":"DIVAnd.jl documentation","title":"DIVAnd.alpha_default","text":"neff, alpha = alpha_default(Labs,alpha)\n\nReturn a default value of alpha.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.ncfile","page":"DIVAnd.jl documentation","title":"DIVAnd.ncfile","text":"DIVAnd_save(ds,filename,xyi,fi,varname;\n                  ncvarattrib = Dict(), ncglobalattrib = Dict(), ...)\n\nSave the result of the analysis in a netCDF file .\n\nInput arguments\n\nds: the NetCDF dataset\nfilename: the name of the NetCDF file\nmask: binary mask delimiting the domain. true is inside and false outside. For oceanographic application, this is the land-sea mask where sea is true and land is false.\nxyi: tuple with n elements. Every element represents a coordinate of the final grid on which the observations are interpolated\nfi: the analysed field\nvarname: the name of the NetCDF variable\n\nOptional arguments:\n\nncglobalattrib: a dictionary with the global attributes\nncvarattrib: a dictionary with the variable attributes\nrelerr: relative error\ntimeorigin: time origin for the time units attribute (default is 1900-01-01 00:00:00)\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.writeslice","page":"DIVAnd.jl documentation","title":"DIVAnd.writeslice","text":"writeslice(ncvar, ncvar_relerr, ncvar_Lx, fi, relerr, index)\n\nWrite a slice of data in a netCDF file given by the index index. The variable relerr can be nothing.\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.encodeWMSStyle","page":"DIVAnd.jl documentation","title":"DIVAnd.encodeWMSStyle","text":"encode parameters as key-value separated by : and +\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.loadoriginators","page":"DIVAnd.jl documentation","title":"DIVAnd.loadoriginators","text":"db = loadoriginators(fname)\n\nLoad the CDI list from the file fname (zip with a csv file, or csv file directly).\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_integral","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_integral","text":"Computes an N-dimensional volume integral\n\nDIVAnd_integral(mask,pmn,fieldin)\n\nInput:\n\nmask: mask as usual\npmn : tuple of metrics as usual\nfieldin: field of the same dimensions as mask and which is integrated over the domain\n\nOutput:\n\nintegratedfield: The integral\n\n\n\n\n\n","category":"function"},{"location":"#DIVAnd.DIVAnd_scaleL","page":"DIVAnd.jl documentation","title":"DIVAnd.DIVAnd_scaleL","text":"Computes a relative length based on the mask, metrics and a density field, typically measuring the observation density calculated with DIVAnd_heatmap\n\nlambda = DIVAnd_scaleL(mask,pmn,dens)\n\nInput:\n\nmask: mask as usual\npmn : tuple of metrics as usual\ndens: field of the same dimensions as mask. Higher values of dens will result in lower values of lambda.\n\nOutput:\n\nlambda: field to be applied to a reference length field. Values are around 1 so some regions will have smaller L and some higher L\n\n\n\n\n\n","category":"function"},{"location":"#Examples","page":"DIVAnd.jl documentation","title":"Examples","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"To run the example, you need to install PyPlot. In the folder examples of DIVAnd, you can run e.g. the example DIVAnd_simple_example_1D.jl by issuing:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"# cd(\"/path/to/DIVAnd/examples\")\ninclude(\"test/DIVAnd_simple_example_1D.jl\")","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Replace /path/to/DIVAnd/ by the installation directory of DIVAnd which is the output of the following code:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using DIVAnd;\njoinpath(dirname(pathof(DIVAnd)), \"..\")","category":"page"},{"location":"#Advection-constraint","page":"DIVAnd.jl documentation","title":"Advection constraint","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The functions DIVAndrun, DIVAndgo and diva3d can also use an advection constraint forcing the analysis to align with a vector field (e.g. a velocity field). The velocity field should be a tuple of n-elements. Every element of the tuple is a gridded array (defined at the same location than the target array) representing a single velocity component. For 3D analysis, the order of the dimensions is typically: longitude, latitude and depth. Like-wise the velocity components are zonal, meridional and vertical velocity. The three velocity components has to be scaled by a constant factor to enhance or decrease this constraint. It is recommended that this parameter is tuned by cross-validation. There are no tools currently in DIVAnd.jl to automate this process.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"For the two dimensional case, the velocity has just two components as shown in the example below.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using DIVAnd, PyPlot\n\n# square domain in 2 dimensions from -1 to 1\nmask, (pm, pn), (xi, yi) = DIVAnd_squaredom(2, range(-1, stop = 1, length = 30))\n\n# location of the observations\nx = [.4]\ny = [.4]\n\n# observed value\nf = [1.]\n\n# velocity field and its strength for the advection constrain\nstrength = 0.5\nu = strength * yi\nv = -strength * xi\n\n# normalized obs. error variance and correlation length\nepsilon2 = 1 / 200\nlen = 0.2\n\n# call DIVAnd\nfi, s = DIVAndrun(mask,(pm,pn),(xi,yi),(x,y),f,len,epsilon2; velocity = (u,v))\n\n# plot the results\nsubplot(1,2,1)\nplot(x,y,\"rx\")\nquiver(xi,yi,u,v)\ngca().set_aspect(1)\ntitle(\"velocity field\")\n\nsubplot(1,2,2)\nplot(x,y,\"rx\")\npcolor(xi,yi,fi)\ngca().set_aspect(1)\ntitle(\"analysis\")\nsavefig(\"example-advection-2d.png\"); nothing # hide","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"(Image: )","category":"page"},{"location":"#Performance-considerations","page":"DIVAnd.jl documentation","title":"Performance considerations","text":"","category":"section"},{"location":"#Tuning-the-domain-decomposition","page":"DIVAnd.jl documentation","title":"Tuning the domain decomposition","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The functions diva3d and DIVAndgo split the domain into overlapping sub-domains to reduce the required amount of memory. In some circumstances (in particular few vertical levels), this can unnecessarily degrade the performance. The CPU time of the analysis can be improved by increasing the diva3d option memtofit from 3 (default) to higher values (as long as one does not run out of memory). If this parameter is set to a very high value then the domain decomposition is effectively disabled.","category":"page"},{"location":"#Multiple-CPU-system","page":"DIVAnd.jl documentation","title":"Multiple CPU system","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Per default Julia tries to use all CPUs on your system when doing matrix operations. The number of CPUs is controlled by the call to BLAS.set_num_threads. Using multiple CPUs can result in overhead and it can be beneficial to reduce the number of CPUs:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"BLAS.set_num_threads(2)","category":"page"},{"location":"#Debugging-message","page":"DIVAnd.jl documentation","title":"Debugging message","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"From Julia 1.0 on, debugging messages can be activated using the following Julia command:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"ENV[\"JULIA_DEBUG\"] = \"DIVAnd\"","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"See also https://docs.julialang.org/en/v1/stdlib/Logging/index.html#Environment-variables-1 .","category":"page"},{"location":"#Correlation-length","page":"DIVAnd.jl documentation","title":"Correlation length","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The estimation of the correlation length in the function diva3d can be activated with the option fitcorrlen for the horizontal and vertical correlation. The parameter len should then an empty tuple (()) or a tuple of arrays equal to one. The actually used correlation length is a product between the provided values of the array len and the estimated correlation length by fitting. Setting fitcorrlen to true means thus that the interpretation of the parameters changes from absolution correlation length to relative correlation length.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The estimation of the horizontal and vertical correlation can also be activated selectively by just setting fithorzcorrlen and fitvertcorrlen (respectively) to true.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"If one wants to not use the vertical correlation length, the one can put the corresponding value in len to zero. Consequently the value of fitvertcorrlen and fitcorrlen should be keep to false (i.e. its default values). Optimizing the horizontal correlation length is still possible by setting fithorzcorrlen to true.","category":"page"},{"location":"#Integrating-different-datasets","page":"DIVAnd.jl documentation","title":"Integrating different datasets","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"To facilitated the integrating of different datasets, the function WorldOceanDatabase.load from the module PhysOcean now supports an option prefixid which can be set to \"1977-\" so that the obsids have automatically the right format for DIVAnd, e.g. \"1977-wod123456789O\":","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using PhysOcean\n# assuming the data in the directory \"somedir\": e.g. \"somedir/CTD/file.nc\", \"somedir/XBT/file.nc\"...\nbasedir = \"somedir\"\nvarname = \"Temperature\"\nprefixid = \"1977-\"\nobsvalue,obslon,obslat,obsdepth,obstime,obsid = WorldOceanDatabase.load(Float64,\n   basedir,varname; prefixid = prefixid);","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"In the module PhysOcean, we implemented the function ARGO.load which can load data following the ARGO format and in particular the CORA dataset. In fact, even if CORA is distributed through CMEMS, the netCDF files in CORA do not follow the same format than the other in situ netCDF files from CMEMS. Therefore the function CMEMS.load can not be used for the CORA dataset. ARGO.load also supports the option prefixid.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using Glob, PhysOcean\n# assuming the data in the directory \"somedir\": e.g. \"somedir/someyear/file.nc\"\nfilenames = glob(\"*/*nc\",\"somedir\")\nobsvalue,obslon,obslat,obsdepth,obstime,obsids = ARGO.load(Float64,\n   filenames,varname; prefixid = \"4630-\")","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"In divadoxml we added the new argument additionalcontacts which allows one to acknowledge other datasets which are not in the MARIS database:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using DIVAnd\nadditionalcontacts = [\n    DIVAnd.getedmoinfo(1977,\"originator\"), # US NODC for World Ocean Database\n    DIVAnd.getedmoinfo(4630,\"originator\"), # CORIOLIS for CORA\n]\nignore_errors = true\nDIVAnd.divadoxml(\n           filename,varname,project,cdilist,xmlfilename,\n           ignore_errors = ignore_errors,\n           additionalcontacts = additionalcontacts\n)","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"note: Note\nYou will see a warning that not all observation identifiers could be found, but this is normal and expected.","category":"page"},{"location":"#Frequently-asked-questions","page":"DIVAnd.jl documentation","title":"Frequently asked questions","text":"","category":"section"},{"location":"#Which-data-points-are-used-for-the-analysis?","page":"DIVAnd.jl documentation","title":"Which data points are used for the analysis?","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"An individual data point is used if all following conditions are met:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"longitude/latitude is inside the domain and not adjacent to a land point\nthe depth is within the depth range of the domain\nthe time is within the temporal range\nif an anamorphosis transform is used, it should correspond to a finite transformed value\nduring the loading, the corresponding quality flag is among the accepted quality flags","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Note that for points 1.-3. the finite precision of floating point numbers can affect the results.","category":"page"},{"location":"#How-to-resolve-a-bias-of-the-surface-layer-(or-the-deepest-layer)?","page":"DIVAnd.jl documentation","title":"How to resolve a bias of the surface layer (or the deepest layer)?","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"In DIVAnd, the vertical levels must resolve the vertical correlation length. If the vertical correlation length is smaller than the surface resolution, this can result in a bias of the surface value. A similar problem can also be present at the deepest layer. The solution is to either refine the vertical resolution or to increase the vertical correlation length.","category":"page"},{"location":"#How-do-I-limit-the-estimated-horizontal-and-vertical-correlation-length-in-DIVAnd?","page":"DIVAnd.jl documentation","title":"How do I limit the estimated horizontal and vertical correlation length in DIVAnd?","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"It can be necessary to limit the estimated correlation length to an acceptable range. The function (called limitfun) can be applied to the estimated correlation to make such adjustment. This function takes as arguments the estimated correlation length and the depth and returns the adjusted correlation length. For example the following function forces the horizontal correlation length to be between 50 km and 200 km (independently of the depth).","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"# len and z are expressed in meters\nfunction mylimitfun(z,len)\n   if len > 200_000\n      return 200_000\n   end\n   if len < 50_000\n      return 50_000\n   end\n   return len\nend","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"(200_000 is just a more readable way to write 200000). This function is used in diva3d as follow:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"... = diva3d(...\n   fithorz_param = Dict(:limitfun => mylimitfun)","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The same can be achieved more compactly as follows:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"... = diva3d(...\n   fithorz_param = Dict(:limitfun => (z,len) -> min(max(len,50_000),200_000)),\n   fitvert_param = Dict(:limitfun => (z,len) -> min(max(len,20),200)))","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"A similar option has also be added for the vertical correlation length.","category":"page"},{"location":"#How-do-I-reduce-the-estimated-correlation-length-near-the-coast-when-it-is-estimated-internally?","page":"DIVAnd.jl documentation","title":"How do I reduce the estimated correlation length near the coast when it is estimated internally?","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The actual used correlation lengths is the product between the estimated one (by fitting) and the arrays in the parameter len (if provided). The function lengraddepth can be used to create a reduced correlation length near the bathymetry. (https://github.com/gher-ulg/Diva-Workshops/blob/master/notebooks/5-AdvancedTopics/17-relative-correlation-length.ipynb)","category":"page"},{"location":"#How-can-I-handle-data-set-of-very-different-resolution?","page":"DIVAnd.jl documentation","title":"How can I handle data set of very different resolution?","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"If data from a high-resolution dataset (e.g. profiling float, dense time series) is combined with data with a low spatial resolution (e.g. profiles from a research vessel), then the analysis can be biased toward the high-resolution data. The function weight_RtimesOne(x,len) can be used to reduce the weight of the high-resolution data (https://github.com/gher-ulg/Diva-Workshops/blob/master/notebooks/13-processing-parameter-optimization.ipynb). Alternative methods are averaging data in bins (\"binning\") or simply sub-sampling the data.","category":"page"},{"location":"#My-parameter-represent-a-concentration-and-I-get-unrealistic-negative-values","page":"DIVAnd.jl documentation","title":"My parameter represent a concentration and I get unrealistic negative values","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"You can use an anamorphosis transform, in particular DIVAnd.Anam.loglin. The idea is that the transformed variable is closer to a Gaussian distribution that the original variable.\nUse the option fieldmin = 0.0 of diva3d","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"If the parameter epsilon of DIVAnd.Anam.loglin is larger than zero (which is necessary if some measurements are exactly zero), then the smallest value that analysis can have is -epsilon. Therefore the option fieldmin is still required to avoid negative values.","category":"page"},{"location":"#How-can-I-speed-up-analysis-using-observations-which-always-have-the-same-coordinates?","page":"DIVAnd.jl documentation","title":"How can I speed up analysis using observations which always have the same coordinates?","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"In this situation, the measurements are always done at the same locations, but the measurements are repeated over time or different variables are measured at those positions. It is possible to take into the already computed matrices so that the subsequent analysis can be executed much faster.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Let's assume the observations are available on np locations and repeated nt times, so that obsval is an array of size np X nt.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The first analysis is performed using:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"@time fi1,s = DIVAndrun((mask),(pm,pn),\n    (xi,yi),(obslon,obslat),Float64.(obsval[:,1]),len,epsilon2);","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"then, for the nt other analysis, we use the structure s, computed in the previous step, as follows:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"fpi = s.P * (s.H' * (s.R \\ obsval[:,i]))\nf_with_mask = unpack(s.sv, fpi, NaN)","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"where i=1, ..., nt.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The unpack function unpacks the vector fpi into the different variables var1, var2, ... s.sv is the statevector and NaN is the fill value.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Check the example.","category":"page"},{"location":"#API-changes","page":"DIVAnd.jl documentation","title":"API changes","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"We do our best to avoid changing the API, but sometimes it is unfortunately necessary.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"2021-04-21: When using domain splitting, the average correlation length is computed over all domain and not per subdomain. The API remained the same.\n2019-06-24: DIVAnd.fit_isotropic and DIVAnd.fit are removed and replaced by DIVAnd.fithorzlen and DIVAnd.fitvertlen.\n2019-06-24: If the parameters background_lenz and background_lenz_factor of diva3d are both specified, then preference will now be given for background_lenz.\n2018-07-02: The module divand has been renamed DIVAnd and likewise functions containing divand\n2018-06-18: The options nmean and distbin of fithorzlen and fitvertlen have been removed. The functions now choose appropriate values for these parameters automatically.","category":"page"},{"location":"#Information-for-developers","page":"DIVAnd.jl documentation","title":"Information for developers","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"To update the documentation locally, install the package Documenter and run the script include(\"docs/make.jl\").","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using Pkg\nPkg.add(\"Documenter\")","category":"page"},{"location":"#Troubleshooting","page":"DIVAnd.jl documentation","title":"Troubleshooting","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"If the installation of a package fails, it is recommended to update the local copy of the package list by issuing Pkg.update() to make sure that Julia knows about the latest version of these packages and then to re-try the installation of the problematic package. For example to retry the installation of EzXML issue the following command:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using Pkg\nPkg.update()\nPkg.add(\"EzXML\")","category":"page"},{"location":"#Installation-problem-of-PyPlot-on-Linux-(Debian/Ubuntu)","page":"DIVAnd.jl documentation","title":"Installation problem of PyPlot on Linux (Debian/Ubuntu)","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Make sure that the following Debian/Ubuntu packages are installed:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"sudo apt-get install python3 libpython3 python3-tk","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Then start Julia and run:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using Pkg\nPkg.build(\"PyCall\")\nPkg.build(\"PyPlot\")","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Test PyPlot with:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using PyPlot\nplot(1:10)","category":"page"},{"location":"#No-plotting-window-appears","page":"DIVAnd.jl documentation","title":"No plotting window appears","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"If the following command doesn't produce any figure","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using PyPlot\nplot(1:10)","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"A possible solution is to modify the backend: this is done by editing the python configuration file matplotlibrc. The location of this file is obtained in python with:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"import matplotlib\nmatplotlib.matplotlib_fname","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Under Linux, this returns '~/.config/matplotlib/matplotlibrc'. To use the TkAgg backend, add the following to the file:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"backend      : TkAgg","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The matplotlibrc need to be created if it does not exists.","category":"page"},{"location":"#C-runtime-library-when-calling-PyPlot","page":"DIVAnd.jl documentation","title":"C runtime library when calling PyPlot","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"R6034 an application has made an attempt to load the C runtime library incorrectly on Windows 10 with julia 0.6.1, matplotlib 2.1.0, PyPlot 2.3.2:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"ENV[\"MPLBACKEND\"]=\"qt4agg\"","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"You can put this line in a file .juliarc.jl placed in your home directory (the output of homedir() in Julia).","category":"page"},{"location":"#Julia-cannot-connect-to-GitHub-on-Windows-7-and-Windows-Server-2012","page":"DIVAnd.jl documentation","title":"Julia cannot connect to GitHub on Windows 7 and Windows Server 2012","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Cloning the package registery or downloading a Julia packages fails with:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"GitError(Code:ECERTIFICATE, Class:OS, , user cancelled certificate checks: )","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The problem is that Windows 7 and Windows Server 2012 uses outdated encryption protocols. The solution is to run the \"Easy fix\" tool from the Microsoft support page","category":"page"},{"location":"#MbedTLS.jl-does-not-install-on-Windows-7","page":"DIVAnd.jl documentation","title":"MbedTLS.jl does not install on Windows 7","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The installation of MbedTLS.jl fails with the error message:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"INFO: Building MbedTLS\nInfo: Downloading https://github.com/quinnj/MbedTLSBuilder/releases/download/v0.6/MbedTLS.x86_64-w64-mingw32.tar.gz to C:\\Users\\Jeremy\\.julia\\v0.6\\MbedTLS\n\\deps\\usr\\downloads\\MbedTLS.x86_64-w64-mingw32.tar.gz...\nException setting \"SecurityProtocol\": \"Cannot convert null to type \"System.Net.SecurityProtocolType\" due to invalid enumeration values. Specify one of th\ne following enumeration values and try again. The possible enumeration values are \"Ssl3, Tls\".\"\nAt line:1 char:35\n+ [System.Net.ServicePointManager]:: <<<< SecurityProtocol =\n    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException\n    + FullyQualifiedErrorId : PropertyAssignmentException\n    [...]","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"See also the issue https://github.com/JuliaWeb/MbedTLS.jl/issues/133.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The solution is to install the Windows Management Framework 4.0.","category":"page"},{"location":"#EzXML.jl-cannot-be-installed-on-RedHat-6","page":"DIVAnd.jl documentation","title":"EzXML.jl cannot be installed on RedHat 6","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The zlib library of RedHat 6, is slightly older than the library which EzXML.jl and libxml2 requires.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"To verify this issue, you can type in Julia","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using Libdl\nusing Pkg\nLibdl.dlopen(joinpath(Pkg.dir(\"EzXML\"),\"deps/usr/lib/libxml2.so\"))","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"It should not return an error message. On Redhat 6.6, the following error message is returned:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"ERROR: could not load library \"/home/username/.../EzXML/deps/usr/lib/libxml2.so\"\n\n/lib64/libz.so.1: version `ZLIB_1.2.3.3' not found (required by /home/.../EzXML/deps/usr/lib/libxml2.so)\n\nStacktrace:\n\n [1] dlopen(::String, ::UInt32) at ./libdl.jl:97 (repeats 2 times)","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"A newer version zlib can be installed by the following command:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using Pkg\nPkg.add(\"CodecZlib\")","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"However, the following command should work:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":" LD_LIBRARY_PATH=\"$HOME/.julia/full/path/to/CodecZlib/.../deps/usr/lib/:$LD_LIBRARY_PATH\" julia --eval  'print(Libdl.dlopen(joinpath(Pkg.dir(\"EzXML\"),\"deps/usr/lib/libxml2.so\"))'","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"by replacing the file path appropriately. (see also https://github.com/JuliaLang/julia/issues/7004, https://github.com/JuliaIO/HDF5.jl/issues/97, and https://github.com/bicycle1885/EzXML.jl/issues/102)","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"To make Julia use this library, a user on RedHat 6 should always start Julia with:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"LD_LIBRARY_PATH=\"$HOME/.julia/full/path/to/CodecZlib/.../deps/usr/lib/:$LD_LIBRARY_PATH\" julia","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"One can also create script with the following content:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"#!/bin/bash\nexport LD_LIBRARY_PATH=\"$HOME/.julia/full/path/to/CodecZlib/.../deps/usr/lib/:$LD_LIBRARY_PATH\"\nexec /path/to/bin/julia \"$@\"","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"by replacing /path/to/bin/julia to the full path of your installation directory. The script should be marked executable and it can be included in your Linux search PATH environment variable. Julia can then be started by calling directly this script.","category":"page"},{"location":"#The-DIVAnd-test-suite-fails-with-automatic-download-failed","page":"DIVAnd.jl documentation","title":"The DIVAnd test suite fails with automatic download failed","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Running using Pkg; Pkg.test(\"DIVAnd\") fails with the error:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"automatic download failed (error: 2147500036)","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The test suite will download some sample data. You need to have internet access and run the test function from a directory with write access.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"You can change the directory to your home directory with the Julia command cd(homedir()).","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"You can check the current working directory with:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"pwd()","category":"page"},{"location":"#Convert-error-in-DIVAnd_obs","page":"DIVAnd.jl documentation","title":"Convert error in DIVAnd_obs","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The full error message:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"MethodError: Cannot `convert` an object of type DIVAnd.DIVAnd_constrain{Float32,Diagonal{Float64},SparseMatrixCSC{Float64,Int64}} to an object of type DIVAnd.DIVAnd_constrain{Float64,TR,TH} where TH<:(AbstractArray{#s370,2} where #s370<:Number) where TR<:(AbstractArray{#s371,2} where #s371<:Number)\nThis may have arisen from a call to the constructor DIVAnd.DIVAnd_constrain{Float64,TR,TH} where TH<:(AbstractArray{#s370,2} where #s370<:Number) where TR<:(AbstractArray{#s371,2} where #s371<:Number)(...),\nsince type constructors fall back to convert methods.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The solution is to use the same type of all input parameters: all Float32 or all Float64.","category":"page"},{"location":"#Monthlist-issue","page":"DIVAnd.jl documentation","title":"Monthlist issue","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Using comments inside list can lead to unexpected results.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"This","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":" monthlist = [\n       [1,2,3]\n       #[4,5,6]\n       ]","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"should be written as","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":" monthlist = [\n       [1,2,3]\n       ]","category":"page"},{"location":"#Error-in-the-factorisation","page":"DIVAnd.jl documentation","title":"Error in the factorisation","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"The error message Base.LinAlg.PosDefException(95650) followed by the stack-trace below might be due to a wrong choice in the analysis parameters, for example a too long correlation length.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Stacktrace:\n [1] #cholfact!#8(::Float64, ::Function, ::Base.SparseArrays.CHOLMOD.Factor{Float64}, ::Base.SparseArrays.CHOLMOD.Sparse{Float64}) at ./sparse/cholmod.jl:1360\n .................\n [9] DIVAndrun(::BitArray{3}, ::Tuple{Array{Float64,3},Array{Float64,3},Array{Float64,3}}, ::Tuple{Array{Float64,3},Array{Float64,3},Array{Float64,3}}, ::Tuple{Array{Float64,1},Array{Float64,1},Array{Float64,1}}, ::Array{Float64,1}, ::Tuple{Array{Float64,3},Array{Float64,3},Array{Float64,3}}, ::Float64) at /home/ctroupin/.julia/v0.6/DIVAnd/src/DIVAndrun.jl:147","category":"page"},{"location":"#DimensionMismatch-when-running-diva3d","page":"DIVAnd.jl documentation","title":"DimensionMismatch when running diva3d","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"You get an error like","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"DimensionMismatch(\"tried to assign 201×201 array to 202×201 destination\")","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"This type of error might be due to the reading of the bathymetry: if you work with a regional bathymetry (for instance not with GEBCO), you should set the option bathisglobal to false.","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"When bathisglobal = true, the longitude is supposed to wrap around (the last element of the lon should be right before the first element of lon), thus the dimension mismatch.","category":"page"},{"location":"#Installing-additional-packages-when-using-a-git-clone","page":"DIVAnd.jl documentation","title":"Installing additional packages when using a git clone","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"If DIVAnd is installed without the package manager, it can be necessary to install additional packages. This will be explicitly shown, for example:","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"LoadError: ArgumentError: Module Roots not found in current path.\nRun `Pkg.add(\"Roots\")` to install the Roots package.","category":"page"},{"location":"#Kernel-not-working-with-IJulia/Jupyter-under-Julia-0.7-Windows","page":"DIVAnd.jl documentation","title":"Kernel not working with IJulia/Jupyter under Julia 0.7 Windows","text":"","category":"section"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"Try these commands","category":"page"},{"location":"","page":"DIVAnd.jl documentation","title":"DIVAnd.jl documentation","text":"using Pkg\nPkg.add(\"ZMQ\")\nPkg.add(\"IJulia\")\nPkg.update()","category":"page"}]
}
